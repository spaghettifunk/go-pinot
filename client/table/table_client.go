// Code generated by go-swagger; DO NOT EDIT.

package table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new table API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for table API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddTable(params *AddTableParams) (*AddTableOK, error)

	AlterTableStateOrListTableConfig(params *AlterTableStateOrListTableConfigParams) (*AlterTableStateOrListTableConfigOK, error)

	AssignInstances(params *AssignInstancesParams) (*AssignInstancesOK, error)

	CheckTableConfig(params *CheckTableConfigParams) (*CheckTableConfigOK, error)

	DeleteTable(params *DeleteTableParams) (*DeleteTableOK, error)

	GetExternalView(params *GetExternalViewParams) (*GetExternalViewOK, error)

	GetIdealState(params *GetIdealStateParams) (*GetIdealStateOK, error)

	GetInstancePartitions(params *GetInstancePartitionsParams) (*GetInstancePartitionsOK, error)

	GetTableInstances(params *GetTableInstancesParams) (*GetTableInstancesOK, error)

	GetTableSize(params *GetTableSizeParams) (*GetTableSizeOK, error)

	GetTableState(params *GetTableStateParams) (*GetTableStateOK, error)

	GetTableStats(params *GetTableStatsParams) (*GetTableStatsOK, error)

	IngestFromFile(params *IngestFromFileParams) error

	IngestFromURI(params *IngestFromURIParams) error

	ListTableConfigs(params *ListTableConfigsParams) (*ListTableConfigsOK, error)

	Put(params *PutParams) (*PutOK, error)

	Rebalance(params *RebalanceParams) (*RebalanceOK, error)

	RebuildBrokerResource(params *RebuildBrokerResourceParams) (*RebuildBrokerResourceOK, error)

	RecommendConfig(params *RecommendConfigParams) (*RecommendConfigOK, error)

	RemoveInstancePartitions(params *RemoveInstancePartitionsParams) (*RemoveInstancePartitionsOK, error)

	ReplaceInstance(params *ReplaceInstanceParams) (*ReplaceInstanceOK, error)

	SetInstancePartitions(params *SetInstancePartitionsParams) (*SetInstancePartitionsOK, error)

	UpdateIndexingConfig(params *UpdateIndexingConfigParams) (*UpdateIndexingConfigOK, error)

	UpdateTableConfig(params *UpdateTableConfigParams) (*UpdateTableConfigOK, error)

	UpdateTableMetadata(params *UpdateTableMetadataParams) (*UpdateTableMetadataOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddTable adds a table

  Adds a table
*/
func (a *Client) AddTable(params *AddTableParams) (*AddTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTable",
		Method:             "POST",
		PathPattern:        "/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlterTableStateOrListTableConfig gets enable disable drop a table

  Get/Enable/Disable/Drop a table. If table name is the only parameter specified , the tableconfig will be printed
*/
func (a *Client) AlterTableStateOrListTableConfig(params *AlterTableStateOrListTableConfigParams) (*AlterTableStateOrListTableConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlterTableStateOrListTableConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "alterTableStateOrListTableConfig",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AlterTableStateOrListTableConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlterTableStateOrListTableConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for alterTableStateOrListTableConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AssignInstances assigns server instances to a table
*/
func (a *Client) AssignInstances(params *AssignInstancesParams) (*AssignInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignInstances",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/assignInstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AssignInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckTableConfig validates table config for a table

  This API returns the table config that matches the one you get from 'GET /tables/{tableName}'. This allows us to validate table config before apply.
*/
func (a *Client) CheckTableConfig(params *CheckTableConfigParams) (*CheckTableConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckTableConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkTableConfig",
		Method:             "POST",
		PathPattern:        "/tables/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CheckTableConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckTableConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkTableConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTable deletes a table

  Deletes a table
*/
func (a *Client) DeleteTable(params *DeleteTableParams) (*DeleteTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTable",
		Method:             "DELETE",
		PathPattern:        "/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExternalView gets table external view

  Get table external view
*/
func (a *Client) GetExternalView(params *GetExternalViewParams) (*GetExternalViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalView",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/externalview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetExternalViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExternalViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExternalView: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIdealState gets table ideal state

  Get table ideal state
*/
func (a *Client) GetIdealState(params *GetIdealStateParams) (*GetIdealStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIdealStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIdealState",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/idealstate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIdealStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIdealStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIdealState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstancePartitions gets the instance partitions
*/
func (a *Client) GetInstancePartitions(params *GetInstancePartitionsParams) (*GetInstancePartitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancePartitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancePartitions",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/instancePartitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInstancePartitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstancePartitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstancePartitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTableInstances lists table instances

  List instances of the given table
*/
func (a *Client) GetTableInstances(params *GetTableInstancesParams) (*GetTableInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTableInstances",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTableInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTableSize reads table sizes

  Get table size details. Table size is the size of untarred segments including replication
*/
func (a *Client) GetTableSize(params *GetTableSizeParams) (*GetTableSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTableSize",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTableSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableSizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableSize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTableState gets current table state

  Get current table state
*/
func (a *Client) GetTableState(params *GetTableStateParams) (*GetTableStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTableState",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTableStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTableStats tables stats

  Provides metadata info/stats about the table.
*/
func (a *Client) GetTableStats(params *GetTableStatsParams) (*GetTableStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTableStats",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTableStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IngestFromFile ingests a file

  Creates a segment using given file and pushes it to Pinot.
 All steps happen on the controller. This API is NOT meant for production environments/large input files.
 Example usage (query params need encoding):
```
curl -X POST -F file=@data.json -H "Content-Type: multipart/form-data" "http://localhost:9000/ingestFromFile?tableNameWithType=foo_OFFLINE&
batchConfigMapStr={
  "inputFormat":"csv",
  "recordReader.prop.delimiter":"|"
}"
```
*/
func (a *Client) IngestFromFile(params *IngestFromFileParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIngestFromFileParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ingestFromFile",
		Method:             "POST",
		PathPattern:        "/ingestFromFile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IngestFromFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  IngestFromURI ingests from the given URI

  Creates a segment using file at the given URI and pushes it to Pinot.
 All steps happen on the controller. This API is NOT meant for production environments/large input files.
Example usage (query params need encoding):
```
curl -X POST "http://localhost:9000/ingestFromURI?tableNameWithType=foo_OFFLINE
&batchConfigMapStr={
  "inputFormat":"json",
  "input.fs.className":"org.apache.pinot.plugin.filesystem.S3PinotFS",
  "input.fs.prop.region":"us-central",
  "input.fs.prop.accessKey":"foo",
  "input.fs.prop.secretKey":"bar"
}
&sourceURIStr=s3://test.bucket/path/to/json/data/data.json"
```
*/
func (a *Client) IngestFromURI(params *IngestFromURIParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIngestFromURIParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ingestFromURI",
		Method:             "POST",
		PathPattern:        "/ingestFromURI",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IngestFromURIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ListTableConfigs lists all tables in cluster

  Lists all tables in cluster
*/
func (a *Client) ListTableConfigs(params *ListTableConfigsParams) (*ListTableConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTableConfigsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTableConfigs",
		Method:             "GET",
		PathPattern:        "/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTableConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTableConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTableConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Put updates segments configuration

  Updates segmentsConfig section (validation and retention) of a table
*/
func (a *Client) Put(params *PutParams) (*PutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put",
		Method:             "PUT",
		PathPattern:        "/tables/{tableName}/segmentConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Rebalance rebalances a table reassign instances and segments for a table

  Rebalances a table (reassign instances and segments for a table)
*/
func (a *Client) Rebalance(params *RebalanceParams) (*RebalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebalanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rebalance",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/rebalance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RebalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rebalance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RebuildBrokerResource rebuilds broker resource for table

  when new brokers are added
*/
func (a *Client) RebuildBrokerResource(params *RebuildBrokerResourceParams) (*RebuildBrokerResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebuildBrokerResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rebuildBrokerResource",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/rebuildBrokerResourceFromHelixTags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RebuildBrokerResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebuildBrokerResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rebuildBrokerResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RecommendConfig recommends config

  Recommend a config with input json
*/
func (a *Client) RecommendConfig(params *RecommendConfigParams) (*RecommendConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecommendConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "recommendConfig",
		Method:             "PUT",
		PathPattern:        "/tables/recommender",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecommendConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecommendConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for recommendConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveInstancePartitions removes the instance partitions
*/
func (a *Client) RemoveInstancePartitions(params *RemoveInstancePartitionsParams) (*RemoveInstancePartitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveInstancePartitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeInstancePartitions",
		Method:             "DELETE",
		PathPattern:        "/tables/{tableName}/instancePartitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveInstancePartitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveInstancePartitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeInstancePartitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceInstance replaces an instance in the instance partitions
*/
func (a *Client) ReplaceInstance(params *ReplaceInstanceParams) (*ReplaceInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstance",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/replaceInstance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetInstancePartitions creates update the instance partitions
*/
func (a *Client) SetInstancePartitions(params *SetInstancePartitionsParams) (*SetInstancePartitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetInstancePartitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setInstancePartitions",
		Method:             "PUT",
		PathPattern:        "/tables/{tableName}/instancePartitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetInstancePartitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetInstancePartitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setInstancePartitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateIndexingConfig updates table indexing configuration
*/
func (a *Client) UpdateIndexingConfig(params *UpdateIndexingConfigParams) (*UpdateIndexingConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIndexingConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateIndexingConfig",
		Method:             "PUT",
		PathPattern:        "/tables/{tableName}/indexingConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateIndexingConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIndexingConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIndexingConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTableConfig updates table config for a table

  Updates table config for a table
*/
func (a *Client) UpdateTableConfig(params *UpdateTableConfigParams) (*UpdateTableConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTableConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTableConfig",
		Method:             "PUT",
		PathPattern:        "/tables/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTableConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTableConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTableConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTableMetadata updates table metadata

  Updates table configuration
*/
func (a *Client) UpdateTableMetadata(params *UpdateTableMetadataParams) (*UpdateTableMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTableMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTableMetadata",
		Method:             "PUT",
		PathPattern:        "/tables/{tableName}/metadataConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTableMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTableMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTableMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
