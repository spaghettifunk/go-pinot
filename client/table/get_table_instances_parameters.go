// Code generated by go-swagger; DO NOT EDIT.

package table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetTableInstancesParams creates a new GetTableInstancesParams object
// with the default values initialized.
func NewGetTableInstancesParams() *GetTableInstancesParams {
	var ()
	return &GetTableInstancesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTableInstancesParamsWithTimeout creates a new GetTableInstancesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTableInstancesParamsWithTimeout(timeout time.Duration) *GetTableInstancesParams {
	var ()
	return &GetTableInstancesParams{

		timeout: timeout,
	}
}

// NewGetTableInstancesParamsWithContext creates a new GetTableInstancesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTableInstancesParamsWithContext(ctx context.Context) *GetTableInstancesParams {
	var ()
	return &GetTableInstancesParams{

		Context: ctx,
	}
}

// NewGetTableInstancesParamsWithHTTPClient creates a new GetTableInstancesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTableInstancesParamsWithHTTPClient(client *http.Client) *GetTableInstancesParams {
	var ()
	return &GetTableInstancesParams{
		HTTPClient: client,
	}
}

/*GetTableInstancesParams contains all the parameters to send to the API endpoint
for the get table instances operation typically these are written to a http.Request
*/
type GetTableInstancesParams struct {

	/*TableName
	  Table name without type

	*/
	TableName string
	/*Type
	  Instance type

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get table instances params
func (o *GetTableInstancesParams) WithTimeout(timeout time.Duration) *GetTableInstancesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get table instances params
func (o *GetTableInstancesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get table instances params
func (o *GetTableInstancesParams) WithContext(ctx context.Context) *GetTableInstancesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get table instances params
func (o *GetTableInstancesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get table instances params
func (o *GetTableInstancesParams) WithHTTPClient(client *http.Client) *GetTableInstancesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get table instances params
func (o *GetTableInstancesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTableName adds the tableName to the get table instances params
func (o *GetTableInstancesParams) WithTableName(tableName string) *GetTableInstancesParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the get table instances params
func (o *GetTableInstancesParams) SetTableName(tableName string) {
	o.TableName = tableName
}

// WithType adds the typeVar to the get table instances params
func (o *GetTableInstancesParams) WithType(typeVar *string) *GetTableInstancesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get table instances params
func (o *GetTableInstancesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetTableInstancesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param tableName
	if err := r.SetPathParam("tableName", o.TableName); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
