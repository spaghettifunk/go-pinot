// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteTaskQueueParams creates a new DeleteTaskQueueParams object
// with the default values initialized.
func NewDeleteTaskQueueParams() *DeleteTaskQueueParams {
	var (
		forceDeleteDefault = bool(false)
	)
	return &DeleteTaskQueueParams{
		ForceDelete: &forceDeleteDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteTaskQueueParamsWithTimeout creates a new DeleteTaskQueueParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteTaskQueueParamsWithTimeout(timeout time.Duration) *DeleteTaskQueueParams {
	var (
		forceDeleteDefault = bool(false)
	)
	return &DeleteTaskQueueParams{
		ForceDelete: &forceDeleteDefault,

		timeout: timeout,
	}
}

// NewDeleteTaskQueueParamsWithContext creates a new DeleteTaskQueueParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteTaskQueueParamsWithContext(ctx context.Context) *DeleteTaskQueueParams {
	var (
		forceDeleteDefault = bool(false)
	)
	return &DeleteTaskQueueParams{
		ForceDelete: &forceDeleteDefault,

		Context: ctx,
	}
}

// NewDeleteTaskQueueParamsWithHTTPClient creates a new DeleteTaskQueueParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteTaskQueueParamsWithHTTPClient(client *http.Client) *DeleteTaskQueueParams {
	var (
		forceDeleteDefault = bool(false)
	)
	return &DeleteTaskQueueParams{
		ForceDelete: &forceDeleteDefault,
		HTTPClient:  client,
	}
}

/*DeleteTaskQueueParams contains all the parameters to send to the API endpoint
for the delete task queue operation typically these are written to a http.Request
*/
type DeleteTaskQueueParams struct {

	/*ForceDelete
	  Whether to force delete the task queue (expert only option, enable with cautious

	*/
	ForceDelete *bool
	/*TaskType
	  Task type

	*/
	TaskType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete task queue params
func (o *DeleteTaskQueueParams) WithTimeout(timeout time.Duration) *DeleteTaskQueueParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete task queue params
func (o *DeleteTaskQueueParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete task queue params
func (o *DeleteTaskQueueParams) WithContext(ctx context.Context) *DeleteTaskQueueParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete task queue params
func (o *DeleteTaskQueueParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete task queue params
func (o *DeleteTaskQueueParams) WithHTTPClient(client *http.Client) *DeleteTaskQueueParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete task queue params
func (o *DeleteTaskQueueParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceDelete adds the forceDelete to the delete task queue params
func (o *DeleteTaskQueueParams) WithForceDelete(forceDelete *bool) *DeleteTaskQueueParams {
	o.SetForceDelete(forceDelete)
	return o
}

// SetForceDelete adds the forceDelete to the delete task queue params
func (o *DeleteTaskQueueParams) SetForceDelete(forceDelete *bool) {
	o.ForceDelete = forceDelete
}

// WithTaskType adds the taskType to the delete task queue params
func (o *DeleteTaskQueueParams) WithTaskType(taskType string) *DeleteTaskQueueParams {
	o.SetTaskType(taskType)
	return o
}

// SetTaskType adds the taskType to the delete task queue params
func (o *DeleteTaskQueueParams) SetTaskType(taskType string) {
	o.TaskType = taskType
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteTaskQueueParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ForceDelete != nil {

		// query param forceDelete
		var qrForceDelete bool
		if o.ForceDelete != nil {
			qrForceDelete = *o.ForceDelete
		}
		qForceDelete := swag.FormatBool(qrForceDelete)
		if qForceDelete != "" {
			if err := r.SetQueryParam("forceDelete", qForceDelete); err != nil {
				return err
			}
		}

	}

	// path param taskType
	if err := r.SetPathParam("taskType", o.TaskType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
