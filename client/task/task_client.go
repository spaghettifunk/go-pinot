// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new task API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for task API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CleanUpTasks(params *CleanUpTasksParams) (*CleanUpTasksOK, error)

	CleanUpTasksDeprecated(params *CleanUpTasksDeprecatedParams) (*CleanUpTasksDeprecatedOK, error)

	DeleteTaskQueue(params *DeleteTaskQueueParams) (*DeleteTaskQueueOK, error)

	DeleteTasks(params *DeleteTasksParams) (*DeleteTasksOK, error)

	GetCronSchedulerInformation(params *GetCronSchedulerInformationParams) (*GetCronSchedulerInformationOK, error)

	GetCronSchedulerJobDetails(params *GetCronSchedulerJobDetailsParams) (*GetCronSchedulerJobDetailsOK, error)

	GetCronSchedulerJobKeys(params *GetCronSchedulerJobKeysParams) (*GetCronSchedulerJobKeysOK, error)

	GetTaskConfigs(params *GetTaskConfigsParams) (*GetTaskConfigsOK, error)

	GetTaskConfigsDeprecated(params *GetTaskConfigsDeprecatedParams) (*GetTaskConfigsDeprecatedOK, error)

	GetTaskQueueState(params *GetTaskQueueStateParams) (*GetTaskQueueStateOK, error)

	GetTaskQueueStateDeprecated(params *GetTaskQueueStateDeprecatedParams) (*GetTaskQueueStateDeprecatedOK, error)

	GetTaskQueues(params *GetTaskQueuesParams) (*GetTaskQueuesOK, error)

	GetTaskState(params *GetTaskStateParams) (*GetTaskStateOK, error)

	GetTaskStateDeprecated(params *GetTaskStateDeprecatedParams) (*GetTaskStateDeprecatedOK, error)

	GetTaskStates(params *GetTaskStatesParams) (*GetTaskStatesOK, error)

	GetTaskStatesDeprecated(params *GetTaskStatesDeprecatedParams) (*GetTaskStatesDeprecatedOK, error)

	GetTasks(params *GetTasksParams) (*GetTasksOK, error)

	GetTasksDeprecated(params *GetTasksDeprecatedParams) (*GetTasksDeprecatedOK, error)

	ListTaskTypes(params *ListTaskTypesParams) (*ListTaskTypesOK, error)

	ResumeTasks(params *ResumeTasksParams) (*ResumeTasksOK, error)

	ScheduleTasks(params *ScheduleTasksParams) (*ScheduleTasksOK, error)

	ScheduleTasksDeprecated(params *ScheduleTasksDeprecatedParams) (*ScheduleTasksDeprecatedOK, error)

	StopTasks(params *StopTasksParams) (*StopTasksOK, error)

	ToggleTaskQueueState(params *ToggleTaskQueueStateParams) (*ToggleTaskQueueStateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CleanUpTasks cleans up finished tasks c o m p l e t e d f a i l e d for the given task type
*/
func (a *Client) CleanUpTasks(params *CleanUpTasksParams) (*CleanUpTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCleanUpTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cleanUpTasks",
		Method:             "PUT",
		PathPattern:        "/tasks/{taskType}/cleanup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CleanUpTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CleanUpTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cleanUpTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CleanUpTasksDeprecated cleans up finished tasks c o m p l e t e d f a i l e d for the given task type deprecated
*/
func (a *Client) CleanUpTasksDeprecated(params *CleanUpTasksDeprecatedParams) (*CleanUpTasksDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCleanUpTasksDeprecatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cleanUpTasksDeprecated",
		Method:             "PUT",
		PathPattern:        "/tasks/cleanuptasks/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CleanUpTasksDeprecatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CleanUpTasksDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cleanUpTasksDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTaskQueue deletes a task queue deprecated
*/
func (a *Client) DeleteTaskQueue(params *DeleteTaskQueueParams) (*DeleteTaskQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTaskQueue",
		Method:             "DELETE",
		PathPattern:        "/tasks/taskqueue/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTaskQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTaskQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTasks deletes all tasks as well as the task queue for the given task type
*/
func (a *Client) DeleteTasks(params *DeleteTasksParams) (*DeleteTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTasks",
		Method:             "DELETE",
		PathPattern:        "/tasks/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCronSchedulerInformation fetches cron scheduler information
*/
func (a *Client) GetCronSchedulerInformation(params *GetCronSchedulerInformationParams) (*GetCronSchedulerInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCronSchedulerInformationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCronSchedulerInformation",
		Method:             "GET",
		PathPattern:        "/tasks/scheduler/information",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCronSchedulerInformationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCronSchedulerInformationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCronSchedulerInformation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCronSchedulerJobDetails fetches cron scheduler job keys
*/
func (a *Client) GetCronSchedulerJobDetails(params *GetCronSchedulerJobDetailsParams) (*GetCronSchedulerJobDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCronSchedulerJobDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCronSchedulerJobDetails",
		Method:             "GET",
		PathPattern:        "/tasks/scheduler/jobDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCronSchedulerJobDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCronSchedulerJobDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCronSchedulerJobDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCronSchedulerJobKeys fetches cron scheduler job keys
*/
func (a *Client) GetCronSchedulerJobKeys(params *GetCronSchedulerJobKeysParams) (*GetCronSchedulerJobKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCronSchedulerJobKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCronSchedulerJobKeys",
		Method:             "GET",
		PathPattern:        "/tasks/scheduler/jobKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCronSchedulerJobKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCronSchedulerJobKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCronSchedulerJobKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskConfigs gets the task config a list of child task configs for the given task
*/
func (a *Client) GetTaskConfigs(params *GetTaskConfigsParams) (*GetTaskConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskConfigsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskConfigs",
		Method:             "GET",
		PathPattern:        "/tasks/task/{taskName}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskConfigsDeprecated gets the task config a list of child task configs for the given task deprecated
*/
func (a *Client) GetTaskConfigsDeprecated(params *GetTaskConfigsDeprecatedParams) (*GetTaskConfigsDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskConfigsDeprecatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskConfigsDeprecated",
		Method:             "GET",
		PathPattern:        "/tasks/taskconfig/{taskName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskConfigsDeprecatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskConfigsDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskConfigsDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskQueueState gets the state task queue state for the given task type
*/
func (a *Client) GetTaskQueueState(params *GetTaskQueueStateParams) (*GetTaskQueueStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskQueueStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskQueueState",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskQueueStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskQueueStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskQueueState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskQueueStateDeprecated gets the state task queue state for the given task type deprecated
*/
func (a *Client) GetTaskQueueStateDeprecated(params *GetTaskQueueStateDeprecatedParams) (*GetTaskQueueStateDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskQueueStateDeprecatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskQueueStateDeprecated",
		Method:             "GET",
		PathPattern:        "/tasks/taskqueuestate/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskQueueStateDeprecatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskQueueStateDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskQueueStateDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskQueues lists all task queues deprecated
*/
func (a *Client) GetTaskQueues(params *GetTaskQueuesParams) (*GetTaskQueuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskQueuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskQueues",
		Method:             "GET",
		PathPattern:        "/tasks/taskqueues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskQueuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskQueuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskQueues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskState gets the task state for the given task
*/
func (a *Client) GetTaskState(params *GetTaskStateParams) (*GetTaskStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskState",
		Method:             "GET",
		PathPattern:        "/tasks/task/{taskName}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskStateDeprecated gets the task state for the given task deprecated
*/
func (a *Client) GetTaskStateDeprecated(params *GetTaskStateDeprecatedParams) (*GetTaskStateDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskStateDeprecatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskStateDeprecated",
		Method:             "GET",
		PathPattern:        "/tasks/taskstate/{taskName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskStateDeprecatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskStateDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskStateDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskStates gets a map from task to task state for the given task type
*/
func (a *Client) GetTaskStates(params *GetTaskStatesParams) (*GetTaskStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskStatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskStates",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/taskstates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskStatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskStates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTaskStatesDeprecated gets a map from task to task state for the given task type deprecated
*/
func (a *Client) GetTaskStatesDeprecated(params *GetTaskStatesDeprecatedParams) (*GetTaskStatesDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskStatesDeprecatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskStatesDeprecated",
		Method:             "GET",
		PathPattern:        "/tasks/taskstates/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskStatesDeprecatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskStatesDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskStatesDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTasks lists all tasks for the given task type
*/
func (a *Client) GetTasks(params *GetTasksParams) (*GetTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTasks",
		Method:             "GET",
		PathPattern:        "/tasks/{taskType}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTasksDeprecated lists all tasks for the given task type deprecated
*/
func (a *Client) GetTasksDeprecated(params *GetTasksDeprecatedParams) (*GetTasksDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksDeprecatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTasksDeprecated",
		Method:             "GET",
		PathPattern:        "/tasks/tasks/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTasksDeprecatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTasksDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTaskTypes lists all task types
*/
func (a *Client) ListTaskTypes(params *ListTaskTypesParams) (*ListTaskTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTaskTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTaskTypes",
		Method:             "GET",
		PathPattern:        "/tasks/tasktypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTaskTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTaskTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTaskTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResumeTasks resumes all stopped tasks as well as the task queue for the given task type
*/
func (a *Client) ResumeTasks(params *ResumeTasksParams) (*ResumeTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resumeTasks",
		Method:             "PUT",
		PathPattern:        "/tasks/{taskType}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResumeTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ScheduleTasks schedules tasks and return a map from task type to task name scheduled
*/
func (a *Client) ScheduleTasks(params *ScheduleTasksParams) (*ScheduleTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduleTasks",
		Method:             "POST",
		PathPattern:        "/tasks/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScheduleTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scheduleTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ScheduleTasksDeprecated schedules tasks deprecated
*/
func (a *Client) ScheduleTasksDeprecated(params *ScheduleTasksDeprecatedParams) (*ScheduleTasksDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleTasksDeprecatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduleTasksDeprecated",
		Method:             "PUT",
		PathPattern:        "/tasks/scheduletasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScheduleTasksDeprecatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleTasksDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scheduleTasksDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopTasks stops all running pending tasks as well as the task queue for the given task type
*/
func (a *Client) StopTasks(params *StopTasksParams) (*StopTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopTasks",
		Method:             "PUT",
		PathPattern:        "/tasks/{taskType}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ToggleTaskQueueState stops resume a task queue deprecated
*/
func (a *Client) ToggleTaskQueueState(params *ToggleTaskQueueStateParams) (*ToggleTaskQueueStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleTaskQueueStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "toggleTaskQueueState",
		Method:             "PUT",
		PathPattern:        "/tasks/taskqueue/{taskType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ToggleTaskQueueStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ToggleTaskQueueStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for toggleTaskQueueState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
