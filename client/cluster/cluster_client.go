// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cluster API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteClusterConfig(params *DeleteClusterConfigParams) (*DeleteClusterConfigOK, error)

	GetClusterInfo(params *GetClusterInfoParams) (*GetClusterInfoOK, error)

	ListClusterConfigs(params *ListClusterConfigsParams) (*ListClusterConfigsOK, error)

	UpdateClusterConfig(params *UpdateClusterConfigParams) (*UpdateClusterConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteClusterConfig deletes cluster configuration
*/
func (a *Client) DeleteClusterConfig(params *DeleteClusterConfigParams) (*DeleteClusterConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterConfig",
		Method:             "DELETE",
		PathPattern:        "/cluster/configs/{configName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterInfo gets cluster info

  Get cluster Info
*/
func (a *Client) GetClusterInfo(params *GetClusterInfoParams) (*GetClusterInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterInfo",
		Method:             "GET",
		PathPattern:        "/cluster/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClusterConfigs lists cluster configurations

  List cluster level configurations
*/
func (a *Client) ListClusterConfigs(params *ListClusterConfigsParams) (*ListClusterConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterConfigsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterConfigs",
		Method:             "GET",
		PathPattern:        "/cluster/configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListClusterConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClusterConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClusterConfig updates cluster configuration
*/
func (a *Client) UpdateClusterConfig(params *UpdateClusterConfigParams) (*UpdateClusterConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateClusterConfig",
		Method:             "POST",
		PathPattern:        "/cluster/configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateClusterConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
