// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSegmentMetadataParams creates a new GetSegmentMetadataParams object
// with the default values initialized.
func NewGetSegmentMetadataParams() *GetSegmentMetadataParams {
	var ()
	return &GetSegmentMetadataParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSegmentMetadataParamsWithTimeout creates a new GetSegmentMetadataParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSegmentMetadataParamsWithTimeout(timeout time.Duration) *GetSegmentMetadataParams {
	var ()
	return &GetSegmentMetadataParams{

		timeout: timeout,
	}
}

// NewGetSegmentMetadataParamsWithContext creates a new GetSegmentMetadataParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSegmentMetadataParamsWithContext(ctx context.Context) *GetSegmentMetadataParams {
	var ()
	return &GetSegmentMetadataParams{

		Context: ctx,
	}
}

// NewGetSegmentMetadataParamsWithHTTPClient creates a new GetSegmentMetadataParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSegmentMetadataParamsWithHTTPClient(client *http.Client) *GetSegmentMetadataParams {
	var ()
	return &GetSegmentMetadataParams{
		HTTPClient: client,
	}
}

/*GetSegmentMetadataParams contains all the parameters to send to the API endpoint
for the get segment metadata operation typically these are written to a http.Request
*/
type GetSegmentMetadataParams struct {

	/*SegmentName
	  Name of the segment

	*/
	SegmentName string
	/*TableName
	  Name of the table

	*/
	TableName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get segment metadata params
func (o *GetSegmentMetadataParams) WithTimeout(timeout time.Duration) *GetSegmentMetadataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get segment metadata params
func (o *GetSegmentMetadataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get segment metadata params
func (o *GetSegmentMetadataParams) WithContext(ctx context.Context) *GetSegmentMetadataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get segment metadata params
func (o *GetSegmentMetadataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get segment metadata params
func (o *GetSegmentMetadataParams) WithHTTPClient(client *http.Client) *GetSegmentMetadataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get segment metadata params
func (o *GetSegmentMetadataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSegmentName adds the segmentName to the get segment metadata params
func (o *GetSegmentMetadataParams) WithSegmentName(segmentName string) *GetSegmentMetadataParams {
	o.SetSegmentName(segmentName)
	return o
}

// SetSegmentName adds the segmentName to the get segment metadata params
func (o *GetSegmentMetadataParams) SetSegmentName(segmentName string) {
	o.SegmentName = segmentName
}

// WithTableName adds the tableName to the get segment metadata params
func (o *GetSegmentMetadataParams) WithTableName(tableName string) *GetSegmentMetadataParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the get segment metadata params
func (o *GetSegmentMetadataParams) SetTableName(tableName string) {
	o.TableName = tableName
}

// WriteToRequest writes these params to a swagger request
func (o *GetSegmentMetadataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param segmentName
	if err := r.SetPathParam("segmentName", o.SegmentName); err != nil {
		return err
	}

	// path param tableName
	if err := r.SetPathParam("tableName", o.TableName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
