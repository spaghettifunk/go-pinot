// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/spaghettifunk/pinot-go-client/models"
)

// NewUploadSegmentAsMultiPartParams creates a new UploadSegmentAsMultiPartParams object
// with the default values initialized.
func NewUploadSegmentAsMultiPartParams() *UploadSegmentAsMultiPartParams {
	var (
		enableParallelPushProtectionDefault = bool(false)
	)
	return &UploadSegmentAsMultiPartParams{
		EnableParallelPushProtection: &enableParallelPushProtectionDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadSegmentAsMultiPartParamsWithTimeout creates a new UploadSegmentAsMultiPartParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadSegmentAsMultiPartParamsWithTimeout(timeout time.Duration) *UploadSegmentAsMultiPartParams {
	var (
		enableParallelPushProtectionDefault = bool(false)
	)
	return &UploadSegmentAsMultiPartParams{
		EnableParallelPushProtection: &enableParallelPushProtectionDefault,

		timeout: timeout,
	}
}

// NewUploadSegmentAsMultiPartParamsWithContext creates a new UploadSegmentAsMultiPartParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadSegmentAsMultiPartParamsWithContext(ctx context.Context) *UploadSegmentAsMultiPartParams {
	var (
		enableParallelPushProtectionDefault = bool(false)
	)
	return &UploadSegmentAsMultiPartParams{
		EnableParallelPushProtection: &enableParallelPushProtectionDefault,

		Context: ctx,
	}
}

// NewUploadSegmentAsMultiPartParamsWithHTTPClient creates a new UploadSegmentAsMultiPartParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadSegmentAsMultiPartParamsWithHTTPClient(client *http.Client) *UploadSegmentAsMultiPartParams {
	var (
		enableParallelPushProtectionDefault = bool(false)
	)
	return &UploadSegmentAsMultiPartParams{
		EnableParallelPushProtection: &enableParallelPushProtectionDefault,
		HTTPClient:                   client,
	}
}

/*UploadSegmentAsMultiPartParams contains all the parameters to send to the API endpoint
for the upload segment as multi part operation typically these are written to a http.Request
*/
type UploadSegmentAsMultiPartParams struct {

	/*Body*/
	Body *models.FormDataMultiPart
	/*EnableParallelPushProtection
	  Whether to enable parallel push protection

	*/
	EnableParallelPushProtection *bool
	/*TableName
	  Name of the table

	*/
	TableName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) WithTimeout(timeout time.Duration) *UploadSegmentAsMultiPartParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) WithContext(ctx context.Context) *UploadSegmentAsMultiPartParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) WithHTTPClient(client *http.Client) *UploadSegmentAsMultiPartParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) WithBody(body *models.FormDataMultiPart) *UploadSegmentAsMultiPartParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) SetBody(body *models.FormDataMultiPart) {
	o.Body = body
}

// WithEnableParallelPushProtection adds the enableParallelPushProtection to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) WithEnableParallelPushProtection(enableParallelPushProtection *bool) *UploadSegmentAsMultiPartParams {
	o.SetEnableParallelPushProtection(enableParallelPushProtection)
	return o
}

// SetEnableParallelPushProtection adds the enableParallelPushProtection to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) SetEnableParallelPushProtection(enableParallelPushProtection *bool) {
	o.EnableParallelPushProtection = enableParallelPushProtection
}

// WithTableName adds the tableName to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) WithTableName(tableName *string) *UploadSegmentAsMultiPartParams {
	o.SetTableName(tableName)
	return o
}

// SetTableName adds the tableName to the upload segment as multi part params
func (o *UploadSegmentAsMultiPartParams) SetTableName(tableName *string) {
	o.TableName = tableName
}

// WriteToRequest writes these params to a swagger request
func (o *UploadSegmentAsMultiPartParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.EnableParallelPushProtection != nil {

		// query param enableParallelPushProtection
		var qrEnableParallelPushProtection bool
		if o.EnableParallelPushProtection != nil {
			qrEnableParallelPushProtection = *o.EnableParallelPushProtection
		}
		qEnableParallelPushProtection := swag.FormatBool(qrEnableParallelPushProtection)
		if qEnableParallelPushProtection != "" {
			if err := r.SetQueryParam("enableParallelPushProtection", qEnableParallelPushProtection); err != nil {
				return err
			}
		}

	}

	if o.TableName != nil {

		// query param tableName
		var qrTableName string
		if o.TableName != nil {
			qrTableName = *o.TableName
		}
		qTableName := qrTableName
		if qTableName != "" {
			if err := r.SetQueryParam("tableName", qTableName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
