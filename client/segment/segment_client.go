// Code generated by go-swagger; DO NOT EDIT.

package segment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new segment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for segment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAllSegments(params *DeleteAllSegmentsParams) (*DeleteAllSegmentsOK, error)

	DeleteSegment(params *DeleteSegmentParams) (*DeleteSegmentOK, error)

	DeleteSegments(params *DeleteSegmentsParams) (*DeleteSegmentsOK, error)

	DownloadSegment(params *DownloadSegmentParams) error

	EndReplaceSegments(params *EndReplaceSegmentsParams) error

	GetConsumingSegmentsInfo(params *GetConsumingSegmentsInfoParams) (*GetConsumingSegmentsInfoOK, error)

	GetSegmentMetadata(params *GetSegmentMetadataParams) (*GetSegmentMetadataOK, error)

	GetSegmentMetadataDeprecated1(params *GetSegmentMetadataDeprecated1Params) (*GetSegmentMetadataDeprecated1OK, error)

	GetSegmentMetadataDeprecated2(params *GetSegmentMetadataDeprecated2Params) (*GetSegmentMetadataDeprecated2OK, error)

	GetSegmentToCrcMap(params *GetSegmentToCrcMapParams) (*GetSegmentToCrcMapOK, error)

	GetSegmentToCrcMapDeprecated(params *GetSegmentToCrcMapDeprecatedParams) (*GetSegmentToCrcMapDeprecatedOK, error)

	GetSegments(params *GetSegmentsParams) (*GetSegmentsOK, error)

	GetServerMetadata(params *GetServerMetadataParams) (*GetServerMetadataOK, error)

	GetServerToSegmentsMap(params *GetServerToSegmentsMapParams) (*GetServerToSegmentsMapOK, error)

	GetServerToSegmentsMapDeprecated1(params *GetServerToSegmentsMapDeprecated1Params) (*GetServerToSegmentsMapDeprecated1OK, error)

	GetServerToSegmentsMapDeprecated2(params *GetServerToSegmentsMapDeprecated2Params) (*GetServerToSegmentsMapDeprecated2OK, error)

	ReloadAllSegments(params *ReloadAllSegmentsParams) (*ReloadAllSegmentsOK, error)

	ReloadAllSegmentsDeprecated1(params *ReloadAllSegmentsDeprecated1Params) (*ReloadAllSegmentsDeprecated1OK, error)

	ReloadAllSegmentsDeprecated2(params *ReloadAllSegmentsDeprecated2Params) (*ReloadAllSegmentsDeprecated2OK, error)

	ReloadSegment(params *ReloadSegmentParams) (*ReloadSegmentOK, error)

	ReloadSegmentDeprecated1(params *ReloadSegmentDeprecated1Params) (*ReloadSegmentDeprecated1OK, error)

	ReloadSegmentDeprecated2(params *ReloadSegmentDeprecated2Params) (*ReloadSegmentDeprecated2OK, error)

	ResetAllSegments(params *ResetAllSegmentsParams) (*ResetAllSegmentsOK, error)

	ResetSegment(params *ResetSegmentParams) (*ResetSegmentOK, error)

	StartReplaceSegments(params *StartReplaceSegmentsParams) error

	UploadSegmentAsMultiPart(params *UploadSegmentAsMultiPartParams) error

	UploadSegmentAsMultiPartV2(params *UploadSegmentAsMultiPartV2Params) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAllSegments deletes all segments

  Delete all segments
*/
func (a *Client) DeleteAllSegments(params *DeleteAllSegmentsParams) (*DeleteAllSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllSegmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllSegments",
		Method:             "DELETE",
		PathPattern:        "/segments/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAllSegmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAllSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSegment deletes a segment

  Delete a segment
*/
func (a *Client) DeleteSegment(params *DeleteSegmentParams) (*DeleteSegmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSegmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSegment",
		Method:             "DELETE",
		PathPattern:        "/segments/{tableName}/{segmentName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSegmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSegmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSegment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSegments deletes the segments in the JSON array payload

  Delete the segments in the JSON array payload
*/
func (a *Client) DeleteSegments(params *DeleteSegmentsParams) (*DeleteSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSegmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSegmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DownloadSegment downloads a segment

  Download a segment
*/
func (a *Client) DownloadSegment(params *DownloadSegmentParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadSegmentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadSegment",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/{segmentName}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DownloadSegmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  EndReplaceSegments ends to replace segments

  End to replace segments
*/
func (a *Client) EndReplaceSegments(params *EndReplaceSegmentsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndReplaceSegmentsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "endReplaceSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/endReplaceSegments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EndReplaceSegmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetConsumingSegmentsInfo returns state of consuming segments

  Gets the status of consumers from all servers
*/
func (a *Client) GetConsumingSegmentsInfo(params *GetConsumingSegmentsInfoParams) (*GetConsumingSegmentsInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsumingSegmentsInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConsumingSegmentsInfo",
		Method:             "GET",
		PathPattern:        "/tables/{realtimeTableName}/consumingSegmentsInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConsumingSegmentsInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConsumingSegmentsInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConsumingSegmentsInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSegmentMetadata gets the metadata for a segment

  Get the metadata for a segment
*/
func (a *Client) GetSegmentMetadata(params *GetSegmentMetadataParams) (*GetSegmentMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSegmentMetadata",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/{segmentName}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSegmentMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSegmentMetadataDeprecated1 gets the metadata for a segment deprecated use g e t segments table name segment name metadata instead

  Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)
*/
func (a *Client) GetSegmentMetadataDeprecated1(params *GetSegmentMetadataDeprecated1Params) (*GetSegmentMetadataDeprecated1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentMetadataDeprecated1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSegmentMetadataDeprecated1",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/{segmentName}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSegmentMetadataDeprecated1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentMetadataDeprecated1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentMetadataDeprecated1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSegmentMetadataDeprecated2 gets the metadata for a segment deprecated use g e t segments table name segment name metadata instead

  Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)
*/
func (a *Client) GetSegmentMetadataDeprecated2(params *GetSegmentMetadataDeprecated2Params) (*GetSegmentMetadataDeprecated2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentMetadataDeprecated2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSegmentMetadataDeprecated2",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/{segmentName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSegmentMetadataDeprecated2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentMetadataDeprecated2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentMetadataDeprecated2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSegmentToCrcMap gets a map from segment to c r c of the segment only apply to o f f l i n e table

  Get a map from segment to CRC of the segment (only apply to OFFLINE table)
*/
func (a *Client) GetSegmentToCrcMap(params *GetSegmentToCrcMapParams) (*GetSegmentToCrcMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentToCrcMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSegmentToCrcMap",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/crc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSegmentToCrcMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentToCrcMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentToCrcMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSegmentToCrcMapDeprecated gets a map from segment to c r c of the segment deprecated use g e t segments table name crc instead

  Get a map from segment to CRC of the segment (deprecated, use 'GET /segments/{tableName}/crc' instead)
*/
func (a *Client) GetSegmentToCrcMapDeprecated(params *GetSegmentToCrcMapDeprecatedParams) (*GetSegmentToCrcMapDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentToCrcMapDeprecatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSegmentToCrcMapDeprecated",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/crc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSegmentToCrcMapDeprecatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentToCrcMapDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegmentToCrcMapDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSegments lists all segments

  List all segments
*/
func (a *Client) GetSegments(params *GetSegmentsParams) (*GetSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSegments",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSegmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServerMetadata gets the server metadata for all table segments

  Get the server metadata for all table segments
*/
func (a *Client) GetServerMetadata(params *GetServerMetadataParams) (*GetServerMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerMetadata",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServerMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServerToSegmentsMap gets a map from server to segments hosted by the server

  Get a map from server to segments hosted by the server
*/
func (a *Client) GetServerToSegmentsMap(params *GetServerToSegmentsMapParams) (*GetServerToSegmentsMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerToSegmentsMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerToSegmentsMap",
		Method:             "GET",
		PathPattern:        "/segments/{tableName}/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServerToSegmentsMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerToSegmentsMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerToSegmentsMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServerToSegmentsMapDeprecated1 gets a map from server to segments hosted by the server deprecated use g e t segments table name servers instead

  Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)
*/
func (a *Client) GetServerToSegmentsMapDeprecated1(params *GetServerToSegmentsMapDeprecated1Params) (*GetServerToSegmentsMapDeprecated1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerToSegmentsMapDeprecated1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerToSegmentsMapDeprecated1",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServerToSegmentsMapDeprecated1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerToSegmentsMapDeprecated1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerToSegmentsMapDeprecated1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServerToSegmentsMapDeprecated2 gets a map from server to segments hosted by the server deprecated use g e t segments table name servers instead

  Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)
*/
func (a *Client) GetServerToSegmentsMapDeprecated2(params *GetServerToSegmentsMapDeprecated2Params) (*GetServerToSegmentsMapDeprecated2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerToSegmentsMapDeprecated2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerToSegmentsMapDeprecated2",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServerToSegmentsMapDeprecated2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerToSegmentsMapDeprecated2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServerToSegmentsMapDeprecated2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReloadAllSegments reloads all segments

  Reload all segments
*/
func (a *Client) ReloadAllSegments(params *ReloadAllSegmentsParams) (*ReloadAllSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadAllSegmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reloadAllSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReloadAllSegmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadAllSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadAllSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReloadAllSegmentsDeprecated1 reloads all segments deprecated use p o s t segments table name reload instead

  Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)
*/
func (a *Client) ReloadAllSegmentsDeprecated1(params *ReloadAllSegmentsDeprecated1Params) (*ReloadAllSegmentsDeprecated1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadAllSegmentsDeprecated1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reloadAllSegmentsDeprecated1",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/segments/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReloadAllSegmentsDeprecated1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadAllSegmentsDeprecated1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadAllSegmentsDeprecated1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReloadAllSegmentsDeprecated2 reloads all segments deprecated use p o s t segments table name reload instead

  Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)
*/
func (a *Client) ReloadAllSegmentsDeprecated2(params *ReloadAllSegmentsDeprecated2Params) (*ReloadAllSegmentsDeprecated2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadAllSegmentsDeprecated2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reloadAllSegmentsDeprecated2",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReloadAllSegmentsDeprecated2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadAllSegmentsDeprecated2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadAllSegmentsDeprecated2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReloadSegment reloads a segment

  Reload a segment
*/
func (a *Client) ReloadSegment(params *ReloadSegmentParams) (*ReloadSegmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadSegmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reloadSegment",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/{segmentName}/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReloadSegmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadSegmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadSegment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReloadSegmentDeprecated1 reloads a segment deprecated use p o s t segments table name segment name reload instead

  Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)
*/
func (a *Client) ReloadSegmentDeprecated1(params *ReloadSegmentDeprecated1Params) (*ReloadSegmentDeprecated1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadSegmentDeprecated1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reloadSegmentDeprecated1",
		Method:             "POST",
		PathPattern:        "/tables/{tableName}/segments/{segmentName}/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReloadSegmentDeprecated1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadSegmentDeprecated1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadSegmentDeprecated1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReloadSegmentDeprecated2 reloads a segment deprecated use p o s t segments table name segment name reload instead

  Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)
*/
func (a *Client) ReloadSegmentDeprecated2(params *ReloadSegmentDeprecated2Params) (*ReloadSegmentDeprecated2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadSegmentDeprecated2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reloadSegmentDeprecated2",
		Method:             "GET",
		PathPattern:        "/tables/{tableName}/segments/{segmentName}/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReloadSegmentDeprecated2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadSegmentDeprecated2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadSegmentDeprecated2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResetAllSegments resets all segments of the table by first disabling them waiting for external view to stabilize and finally enabling the segments

  Resets a segment by disabling and then enabling a segment
*/
func (a *Client) ResetAllSegments(params *ResetAllSegmentsParams) (*ResetAllSegmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetAllSegmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resetAllSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableNameWithType}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResetAllSegmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetAllSegmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resetAllSegments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResetSegment resets a segment by first disabling it waiting for external view to stabilize and finally enabling it again

  Resets a segment by disabling and then enabling the segment
*/
func (a *Client) ResetSegment(params *ResetSegmentParams) (*ResetSegmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetSegmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resetSegment",
		Method:             "POST",
		PathPattern:        "/segments/{tableNameWithType}/{segmentName}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResetSegmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetSegmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resetSegment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartReplaceSegments starts to replace segments

  Start to replace segments
*/
func (a *Client) StartReplaceSegments(params *StartReplaceSegmentsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartReplaceSegmentsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startReplaceSegments",
		Method:             "POST",
		PathPattern:        "/segments/{tableName}/startReplaceSegments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartReplaceSegmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  UploadSegmentAsMultiPart uploads a segment

  Upload a segment as binary
*/
func (a *Client) UploadSegmentAsMultiPart(params *UploadSegmentAsMultiPartParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadSegmentAsMultiPartParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadSegmentAsMultiPart",
		Method:             "POST",
		PathPattern:        "/segments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadSegmentAsMultiPartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  UploadSegmentAsMultiPartV2 uploads a segment

  Upload a segment as binary
*/
func (a *Client) UploadSegmentAsMultiPartV2(params *UploadSegmentAsMultiPartV2Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadSegmentAsMultiPartV2Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadSegmentAsMultiPartV2",
		Method:             "POST",
		PathPattern:        "/v2/segments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadSegmentAsMultiPartV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
