// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/spaghettifunk/pinot-go-client/models"
)

// NewAddSchemaParams creates a new AddSchemaParams object
// with the default values initialized.
func NewAddSchemaParams() *AddSchemaParams {
	var (
		overrideDefault = bool(true)
	)
	return &AddSchemaParams{
		Override: &overrideDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewAddSchemaParamsWithTimeout creates a new AddSchemaParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddSchemaParamsWithTimeout(timeout time.Duration) *AddSchemaParams {
	var (
		overrideDefault = bool(true)
	)
	return &AddSchemaParams{
		Override: &overrideDefault,

		timeout: timeout,
	}
}

// NewAddSchemaParamsWithContext creates a new AddSchemaParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddSchemaParamsWithContext(ctx context.Context) *AddSchemaParams {
	var (
		overrideDefault = bool(true)
	)
	return &AddSchemaParams{
		Override: &overrideDefault,

		Context: ctx,
	}
}

// NewAddSchemaParamsWithHTTPClient creates a new AddSchemaParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddSchemaParamsWithHTTPClient(client *http.Client) *AddSchemaParams {
	var (
		overrideDefault = bool(true)
	)
	return &AddSchemaParams{
		Override:   &overrideDefault,
		HTTPClient: client,
	}
}

/*AddSchemaParams contains all the parameters to send to the API endpoint
for the add schema operation typically these are written to a http.Request
*/
type AddSchemaParams struct {

	/*Body*/
	Body *models.Schema
	/*Override
	  Whether to override the schema if the schema exists

	*/
	Override *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add schema params
func (o *AddSchemaParams) WithTimeout(timeout time.Duration) *AddSchemaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add schema params
func (o *AddSchemaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add schema params
func (o *AddSchemaParams) WithContext(ctx context.Context) *AddSchemaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add schema params
func (o *AddSchemaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add schema params
func (o *AddSchemaParams) WithHTTPClient(client *http.Client) *AddSchemaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add schema params
func (o *AddSchemaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the add schema params
func (o *AddSchemaParams) WithBody(body *models.Schema) *AddSchemaParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the add schema params
func (o *AddSchemaParams) SetBody(body *models.Schema) {
	o.Body = body
}

// WithOverride adds the override to the add schema params
func (o *AddSchemaParams) WithOverride(override *bool) *AddSchemaParams {
	o.SetOverride(override)
	return o
}

// SetOverride adds the override to the add schema params
func (o *AddSchemaParams) SetOverride(override *bool) {
	o.Override = override
}

// WriteToRequest writes these params to a swagger request
func (o *AddSchemaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Override != nil {

		// query param override
		var qrOverride bool
		if o.Override != nil {
			qrOverride = *o.Override
		}
		qOverride := swag.FormatBool(qrOverride)
		if qOverride != "" {
			if err := r.SetQueryParam("override", qOverride); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
