// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteSchemaReader is a Reader for the DeleteSchema structure.
type DeleteSchemaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSchemaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSchemaOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteSchemaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteSchemaConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSchemaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSchemaOK creates a DeleteSchemaOK with default headers values
func NewDeleteSchemaOK() *DeleteSchemaOK {
	return &DeleteSchemaOK{}
}

/*DeleteSchemaOK handles this case with default header values.

Successfully deleted schema
*/
type DeleteSchemaOK struct {
}

func (o *DeleteSchemaOK) Error() string {
	return fmt.Sprintf("[DELETE /schemas/{schemaName}][%d] deleteSchemaOK ", 200)
}

func (o *DeleteSchemaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSchemaNotFound creates a DeleteSchemaNotFound with default headers values
func NewDeleteSchemaNotFound() *DeleteSchemaNotFound {
	return &DeleteSchemaNotFound{}
}

/*DeleteSchemaNotFound handles this case with default header values.

Schema not found
*/
type DeleteSchemaNotFound struct {
}

func (o *DeleteSchemaNotFound) Error() string {
	return fmt.Sprintf("[DELETE /schemas/{schemaName}][%d] deleteSchemaNotFound ", 404)
}

func (o *DeleteSchemaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSchemaConflict creates a DeleteSchemaConflict with default headers values
func NewDeleteSchemaConflict() *DeleteSchemaConflict {
	return &DeleteSchemaConflict{}
}

/*DeleteSchemaConflict handles this case with default header values.

Schema is in use
*/
type DeleteSchemaConflict struct {
}

func (o *DeleteSchemaConflict) Error() string {
	return fmt.Sprintf("[DELETE /schemas/{schemaName}][%d] deleteSchemaConflict ", 409)
}

func (o *DeleteSchemaConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSchemaInternalServerError creates a DeleteSchemaInternalServerError with default headers values
func NewDeleteSchemaInternalServerError() *DeleteSchemaInternalServerError {
	return &DeleteSchemaInternalServerError{}
}

/*DeleteSchemaInternalServerError handles this case with default header values.

Error deleting schema
*/
type DeleteSchemaInternalServerError struct {
}

func (o *DeleteSchemaInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /schemas/{schemaName}][%d] deleteSchemaInternalServerError ", 500)
}

func (o *DeleteSchemaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
