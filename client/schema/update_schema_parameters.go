// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/spaghettifunk/pinot-go-client/models"
)

// NewUpdateSchemaParams creates a new UpdateSchemaParams object
// with the default values initialized.
func NewUpdateSchemaParams() *UpdateSchemaParams {
	var (
		reloadDefault = bool(false)
	)
	return &UpdateSchemaParams{
		Reload: &reloadDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSchemaParamsWithTimeout creates a new UpdateSchemaParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSchemaParamsWithTimeout(timeout time.Duration) *UpdateSchemaParams {
	var (
		reloadDefault = bool(false)
	)
	return &UpdateSchemaParams{
		Reload: &reloadDefault,

		timeout: timeout,
	}
}

// NewUpdateSchemaParamsWithContext creates a new UpdateSchemaParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSchemaParamsWithContext(ctx context.Context) *UpdateSchemaParams {
	var (
		reloadDefault = bool(false)
	)
	return &UpdateSchemaParams{
		Reload: &reloadDefault,

		Context: ctx,
	}
}

// NewUpdateSchemaParamsWithHTTPClient creates a new UpdateSchemaParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSchemaParamsWithHTTPClient(client *http.Client) *UpdateSchemaParams {
	var (
		reloadDefault = bool(false)
	)
	return &UpdateSchemaParams{
		Reload:     &reloadDefault,
		HTTPClient: client,
	}
}

/*UpdateSchemaParams contains all the parameters to send to the API endpoint
for the update schema operation typically these are written to a http.Request
*/
type UpdateSchemaParams struct {

	/*Body*/
	Body *models.FormDataMultiPart
	/*Reload
	  Whether to reload the table if the new schema is backward compatible

	*/
	Reload *bool
	/*SchemaName
	  Name of the schema

	*/
	SchemaName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update schema params
func (o *UpdateSchemaParams) WithTimeout(timeout time.Duration) *UpdateSchemaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update schema params
func (o *UpdateSchemaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update schema params
func (o *UpdateSchemaParams) WithContext(ctx context.Context) *UpdateSchemaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update schema params
func (o *UpdateSchemaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update schema params
func (o *UpdateSchemaParams) WithHTTPClient(client *http.Client) *UpdateSchemaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update schema params
func (o *UpdateSchemaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update schema params
func (o *UpdateSchemaParams) WithBody(body *models.FormDataMultiPart) *UpdateSchemaParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update schema params
func (o *UpdateSchemaParams) SetBody(body *models.FormDataMultiPart) {
	o.Body = body
}

// WithReload adds the reload to the update schema params
func (o *UpdateSchemaParams) WithReload(reload *bool) *UpdateSchemaParams {
	o.SetReload(reload)
	return o
}

// SetReload adds the reload to the update schema params
func (o *UpdateSchemaParams) SetReload(reload *bool) {
	o.Reload = reload
}

// WithSchemaName adds the schemaName to the update schema params
func (o *UpdateSchemaParams) WithSchemaName(schemaName string) *UpdateSchemaParams {
	o.SetSchemaName(schemaName)
	return o
}

// SetSchemaName adds the schemaName to the update schema params
func (o *UpdateSchemaParams) SetSchemaName(schemaName string) {
	o.SchemaName = schemaName
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSchemaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Reload != nil {

		// query param reload
		var qrReload bool
		if o.Reload != nil {
			qrReload = *o.Reload
		}
		qReload := swag.FormatBool(qrReload)
		if qReload != "" {
			if err := r.SetQueryParam("reload", qReload); err != nil {
				return err
			}
		}

	}

	// path param schemaName
	if err := r.SetPathParam("schemaName", o.SchemaName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
