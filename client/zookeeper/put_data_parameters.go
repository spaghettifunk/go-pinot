// Code generated by go-swagger; DO NOT EDIT.

package zookeeper

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutDataParams creates a new PutDataParams object
// with the default values initialized.
func NewPutDataParams() *PutDataParams {
	var (
		accessOptionDefault    = string("1")
		expectedVersionDefault = string("-1")
		pathDefault            = string("/")
	)
	return &PutDataParams{
		AccessOption:    accessOptionDefault,
		ExpectedVersion: expectedVersionDefault,
		Path:            pathDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPutDataParamsWithTimeout creates a new PutDataParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutDataParamsWithTimeout(timeout time.Duration) *PutDataParams {
	var (
		accessOptionDefault    = string("1")
		expectedVersionDefault = string("-1")
		pathDefault            = string("/")
	)
	return &PutDataParams{
		AccessOption:    accessOptionDefault,
		ExpectedVersion: expectedVersionDefault,
		Path:            pathDefault,

		timeout: timeout,
	}
}

// NewPutDataParamsWithContext creates a new PutDataParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutDataParamsWithContext(ctx context.Context) *PutDataParams {
	var (
		accessOptionDefault    = string("1")
		expectedVersionDefault = string("-1")
		pathDefault            = string("/")
	)
	return &PutDataParams{
		AccessOption:    accessOptionDefault,
		ExpectedVersion: expectedVersionDefault,
		Path:            pathDefault,

		Context: ctx,
	}
}

// NewPutDataParamsWithHTTPClient creates a new PutDataParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutDataParamsWithHTTPClient(client *http.Client) *PutDataParams {
	var (
		accessOptionDefault    = string("1")
		expectedVersionDefault = string("-1")
		pathDefault            = string("/")
	)
	return &PutDataParams{
		AccessOption:    accessOptionDefault,
		ExpectedVersion: expectedVersionDefault,
		Path:            pathDefault,
		HTTPClient:      client,
	}
}

/*PutDataParams contains all the parameters to send to the API endpoint
for the put data operation typically these are written to a http.Request
*/
type PutDataParams struct {

	/*AccessOption
	  accessOption

	*/
	AccessOption string
	/*Data
	  Content

	*/
	Data string
	/*ExpectedVersion
	  expectedVersion

	*/
	ExpectedVersion string
	/*Path
	  Zookeeper Path, must start with /

	*/
	Path string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put data params
func (o *PutDataParams) WithTimeout(timeout time.Duration) *PutDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put data params
func (o *PutDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put data params
func (o *PutDataParams) WithContext(ctx context.Context) *PutDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put data params
func (o *PutDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put data params
func (o *PutDataParams) WithHTTPClient(client *http.Client) *PutDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put data params
func (o *PutDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessOption adds the accessOption to the put data params
func (o *PutDataParams) WithAccessOption(accessOption string) *PutDataParams {
	o.SetAccessOption(accessOption)
	return o
}

// SetAccessOption adds the accessOption to the put data params
func (o *PutDataParams) SetAccessOption(accessOption string) {
	o.AccessOption = accessOption
}

// WithData adds the data to the put data params
func (o *PutDataParams) WithData(data string) *PutDataParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the put data params
func (o *PutDataParams) SetData(data string) {
	o.Data = data
}

// WithExpectedVersion adds the expectedVersion to the put data params
func (o *PutDataParams) WithExpectedVersion(expectedVersion string) *PutDataParams {
	o.SetExpectedVersion(expectedVersion)
	return o
}

// SetExpectedVersion adds the expectedVersion to the put data params
func (o *PutDataParams) SetExpectedVersion(expectedVersion string) {
	o.ExpectedVersion = expectedVersion
}

// WithPath adds the path to the put data params
func (o *PutDataParams) WithPath(path string) *PutDataParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the put data params
func (o *PutDataParams) SetPath(path string) {
	o.Path = path
}

// WriteToRequest writes these params to a swagger request
func (o *PutDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param accessOption
	qrAccessOption := o.AccessOption
	qAccessOption := qrAccessOption
	if qAccessOption != "" {
		if err := r.SetQueryParam("accessOption", qAccessOption); err != nil {
			return err
		}
	}

	// query param data
	qrData := o.Data
	qData := qrData
	if qData != "" {
		if err := r.SetQueryParam("data", qData); err != nil {
			return err
		}
	}

	// query param expectedVersion
	qrExpectedVersion := o.ExpectedVersion
	qExpectedVersion := qrExpectedVersion
	if qExpectedVersion != "" {
		if err := r.SetQueryParam("expectedVersion", qExpectedVersion); err != nil {
			return err
		}
	}

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {
		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
