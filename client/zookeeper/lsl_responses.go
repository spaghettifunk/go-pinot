// Code generated by go-swagger; DO NOT EDIT.

package zookeeper

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// LslReader is a Reader for the Lsl structure.
type LslReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LslReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLslOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewLslNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLslInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLslOK creates a LslOK with default headers values
func NewLslOK() *LslOK {
	return &LslOK{}
}

/*LslOK handles this case with default header values.

Success
*/
type LslOK struct {
}

func (o *LslOK) Error() string {
	return fmt.Sprintf("[GET /zk/lsl][%d] lslOK ", 200)
}

func (o *LslOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLslNotFound creates a LslNotFound with default headers values
func NewLslNotFound() *LslNotFound {
	return &LslNotFound{}
}

/*LslNotFound handles this case with default header values.

ZK Path not found
*/
type LslNotFound struct {
}

func (o *LslNotFound) Error() string {
	return fmt.Sprintf("[GET /zk/lsl][%d] lslNotFound ", 404)
}

func (o *LslNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLslInternalServerError creates a LslInternalServerError with default headers values
func NewLslInternalServerError() *LslInternalServerError {
	return &LslInternalServerError{}
}

/*LslInternalServerError handles this case with default header values.

Internal server error
*/
type LslInternalServerError struct {
}

func (o *LslInternalServerError) Error() string {
	return fmt.Sprintf("[GET /zk/lsl][%d] lslInternalServerError ", 500)
}

func (o *LslInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
