// Code generated by go-swagger; DO NOT EDIT.

package zookeeper

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new zookeeper API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for zookeeper API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	Delete(params *DeleteParams) (*DeleteOK, *DeleteNoContent, error)

	GetData(params *GetDataParams) (*GetDataOK, *GetDataNoContent, error)

	Ls(params *LsParams) (*LsOK, error)

	Lsl(params *LslParams) (*LslOK, error)

	PutData(params *PutDataParams) (*PutDataOK, *PutDataNoContent, error)

	Stat(params *StatParams) (*StatOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Delete deletes the znode at this path
*/
func (a *Client) Delete(params *DeleteParams) (*DeleteOK, *DeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete",
		Method:             "DELETE",
		PathPattern:        "/zk/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteOK:
		return value, nil, nil
	case *DeleteNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zookeeper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetData gets content of the znode
*/
func (a *Client) GetData(params *GetDataParams) (*GetDataOK, *GetDataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getData",
		Method:             "GET",
		PathPattern:        "/zk/get",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDataOK:
		return value, nil, nil
	case *GetDataNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zookeeper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Ls lists the child znodes
*/
func (a *Client) Ls(params *LsParams) (*LsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ls",
		Method:             "GET",
		PathPattern:        "/zk/ls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ls: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Lsl lists the child znodes along with stats
*/
func (a *Client) Lsl(params *LslParams) (*LslOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLslParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lsl",
		Method:             "GET",
		PathPattern:        "/zk/lsl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LslReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LslOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lsl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutData updates the content of the node
*/
func (a *Client) PutData(params *PutDataParams) (*PutDataOK, *PutDataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putData",
		Method:             "PUT",
		PathPattern:        "/zk/put",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PutDataOK:
		return value, nil, nil
	case *PutDataNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zookeeper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Stat gets the stat

   Use this api to fetch additional details of a znode such as creation time, modified time, numChildren etc
*/
func (a *Client) Stat(params *StatParams) (*StatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stat",
		Method:             "GET",
		PathPattern:        "/zk/stat",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
