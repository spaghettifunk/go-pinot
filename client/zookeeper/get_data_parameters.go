// Code generated by go-swagger; DO NOT EDIT.

package zookeeper

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetDataParams creates a new GetDataParams object
// with the default values initialized.
func NewGetDataParams() *GetDataParams {
	var (
		pathDefault = string("/")
	)
	return &GetDataParams{
		Path: pathDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDataParamsWithTimeout creates a new GetDataParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDataParamsWithTimeout(timeout time.Duration) *GetDataParams {
	var (
		pathDefault = string("/")
	)
	return &GetDataParams{
		Path: pathDefault,

		timeout: timeout,
	}
}

// NewGetDataParamsWithContext creates a new GetDataParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDataParamsWithContext(ctx context.Context) *GetDataParams {
	var (
		pathDefault = string("/")
	)
	return &GetDataParams{
		Path: pathDefault,

		Context: ctx,
	}
}

// NewGetDataParamsWithHTTPClient creates a new GetDataParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDataParamsWithHTTPClient(client *http.Client) *GetDataParams {
	var (
		pathDefault = string("/")
	)
	return &GetDataParams{
		Path:       pathDefault,
		HTTPClient: client,
	}
}

/*GetDataParams contains all the parameters to send to the API endpoint
for the get data operation typically these are written to a http.Request
*/
type GetDataParams struct {

	/*Path
	  Zookeeper Path, must start with /

	*/
	Path string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get data params
func (o *GetDataParams) WithTimeout(timeout time.Duration) *GetDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get data params
func (o *GetDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get data params
func (o *GetDataParams) WithContext(ctx context.Context) *GetDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get data params
func (o *GetDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get data params
func (o *GetDataParams) WithHTTPClient(client *http.Client) *GetDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get data params
func (o *GetDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPath adds the path to the get data params
func (o *GetDataParams) WithPath(path string) *GetDataParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get data params
func (o *GetDataParams) SetPath(path string) {
	o.Path = path
}

// WriteToRequest writes these params to a swagger request
func (o *GetDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {
		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
