{
    "swagger": "2.0",
    "info": {
        "description": "APIs for accessing Pinot Controller information",
        "version": "1.0",
        "title": "Pinot Controller API",
        "contact": {
            "name": "https://github.com/apache/incubator-pinot"
        }
    },
    "basePath": "/",
    "tags": [
        {
            "name": "Broker"
        },
        {
            "name": "Cluster"
        },
        {
            "name": "Health"
        },
        {
            "name": "Table"
        },
        {
            "name": "Instance"
        },
        {
            "name": "Leader"
        },
        {
            "name": "Schema"
        },
        {
            "name": "Segment"
        },
        {
            "name": "Tenant"
        },
        {
            "name": "Task"
        },
        {
            "name": "Version"
        },
        {
            "name": "Zookeeper"
        }
    ],
    "schemes": [
        "http",
        "https"
    ],
    "paths": {
        "/brokers": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tenants and tables to brokers mappings",
                "description": "List tenants and tables to brokers mappings",
                "operationId": "listBrokersMapping",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brokers/tenants": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tenants to brokers mappings",
                "description": "List tenants to brokers mappings",
                "operationId": "getTenantsToBrokersMapping",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brokers/tables": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tables to brokers mappings",
                "description": "List tables to brokers mappings",
                "operationId": "getTablesToBrokersMapping",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brokers/tenants/{tenantName}": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List brokers for a given tenant",
                "description": "List brokers for a given tenant",
                "operationId": "getBrokersForTenant",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v2/brokers/tenants/{tenantName}": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List brokers for a given tenant",
                "description": "List brokers for a given tenant",
                "operationId": "getBrokersForTenantV2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InstanceInfo"
                            }
                        }
                    }
                }
            }
        },
        "/brokers/tables/{tableName}": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List brokers for a given table",
                "description": "List brokers for a given table",
                "operationId": "getBrokersForTable",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v2/brokers/tables/{tableName}": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List brokers for a given table",
                "description": "List brokers for a given table",
                "operationId": "getBrokersForTableV2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InstanceInfo"
                            }
                        }
                    }
                }
            }
        },
        "/v2/brokers": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tenants and tables to brokers mappings",
                "description": "List tenants and tables to brokers mappings",
                "operationId": "listBrokersMappingV2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/InstanceInfo"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/brokers/tenants": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tenants to brokers mappings",
                "description": "List tenants to brokers mappings",
                "operationId": "getTenantsToBrokersMappingV2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InstanceInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/brokers/tables": {
            "get": {
                "tags": [
                    "Broker"
                ],
                "summary": "List tables to brokers mappings",
                "description": "List tables to brokers mappings",
                "operationId": "getTablesToBrokersMappingV2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ONLINE|OFFLINE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/InstanceInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brokers/instances/{instanceName}/qps": {
            "post": {
                "tags": [
                    "Broker"
                ],
                "summary": "Enable/disable the query rate limiting for a broker instance",
                "description": "Enable/disable the query rate limiting for a broker instance",
                "operationId": "toggleQueryRateLimiting",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Broker instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Broker_my.broker.com_30000"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "ENABLE|DISABLE",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "ENABLE",
                            "DISABLE"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Instance not found"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/cluster/configs": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "List cluster configurations",
                "description": "List cluster level configurations",
                "operationId": "listClusterConfigs",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Update cluster configuration",
                "description": "",
                "operationId": "updateClusterConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Server error updating configuration"
                    }
                }
            }
        },
        "/cluster/info": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Get cluster Info",
                "description": "Get cluster Info",
                "operationId": "getClusterInfo",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/cluster/configs/{configName}": {
            "delete": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Delete cluster configuration",
                "description": "",
                "operationId": "deleteClusterConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "configName",
                        "in": "path",
                        "description": "Name of the config to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Server error deleting configuration"
                    }
                }
            }
        },
        "/health": {
            "get": {
                "tags": [
                    "Health"
                ],
                "summary": "Check controller health",
                "description": "",
                "operationId": "checkHealth",
                "produces": [
                    "text/plain"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Good"
                    }
                }
            }
        },
        "/pinot-controller/admin": {
            "get": {
                "tags": [
                    "Health"
                ],
                "summary": "Check controller health",
                "description": "",
                "operationId": "checkHealthLegacy",
                "produces": [
                    "text/plain"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Good"
                    }
                }
            }
        },
        "/ingestFromFile": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Ingest a file",
                "description": "Creates a segment using given file and pushes it to Pinot. \n All steps happen on the controller. This API is NOT meant for production environments/large input files. \n Example usage (query params need encoding):\n```\ncurl -X POST -F file=@data.json -H \"Content-Type: multipart/form-data\" \"http://localhost:9000/ingestFromFile?tableNameWithType=foo_OFFLINE&\nbatchConfigMapStr={\n  \"inputFormat\":\"csv\",\n  \"recordReader.prop.delimiter\":\"|\"\n}\" \n```",
                "operationId": "ingestFromFile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableNameWithType",
                        "in": "query",
                        "description": "Name of the table to upload the file to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "batchConfigMapStr",
                        "in": "query",
                        "description": "Batch config Map as json string. Must pass inputFormat, and optionally record reader properties. e.g. {\"inputFormat\":\"json\"}",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FormDataMultiPart"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/ingestFromURI": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Ingest from the given URI",
                "description": "Creates a segment using file at the given URI and pushes it to Pinot. \n All steps happen on the controller. This API is NOT meant for production environments/large input files. \nExample usage (query params need encoding):\n```\ncurl -X POST \"http://localhost:9000/ingestFromURI?tableNameWithType=foo_OFFLINE\n&batchConfigMapStr={\n  \"inputFormat\":\"json\",\n  \"input.fs.className\":\"org.apache.pinot.plugin.filesystem.S3PinotFS\",\n  \"input.fs.prop.region\":\"us-central\",\n  \"input.fs.prop.accessKey\":\"foo\",\n  \"input.fs.prop.secretKey\":\"bar\"\n}\n&sourceURIStr=s3://test.bucket/path/to/json/data/data.json\"\n```",
                "operationId": "ingestFromURI",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableNameWithType",
                        "in": "query",
                        "description": "Name of the table to upload the file to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "batchConfigMapStr",
                        "in": "query",
                        "description": "Batch config Map as json string. Must pass inputFormat, and optionally input FS properties. e.g. {\"inputFormat\":\"json\"}",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sourceURIStr",
                        "in": "query",
                        "description": "URI of file to upload",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/tables/{tableName}/replaceInstance": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Replace an instance in the instance partitions",
                "description": "",
                "operationId": "replaceInstance",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|CONSUMING|COMPLETED",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OFFLINE",
                            "CONSUMING",
                            "COMPLETED"
                        ]
                    },
                    {
                        "name": "oldInstanceId",
                        "in": "query",
                        "description": "Old instance to be replaced",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "newInstanceId",
                        "in": "query",
                        "description": "New instance to replace with",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/InstancePartitions"
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/instancePartitions": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get the instance partitions",
                "description": "",
                "operationId": "getInstancePartitions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|CONSUMING|COMPLETED",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OFFLINE",
                            "CONSUMING",
                            "COMPLETED"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/InstancePartitions"
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Create/update the instance partitions",
                "description": "",
                "operationId": "setInstancePartitions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/InstancePartitions"
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Table"
                ],
                "summary": "Remove the instance partitions",
                "description": "",
                "operationId": "removeInstancePartitions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|CONSUMING|COMPLETED",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OFFLINE",
                            "CONSUMING",
                            "COMPLETED"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/assignInstances": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Assign server instances to a table",
                "description": "",
                "operationId": "assignInstances",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|CONSUMING|COMPLETED",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OFFLINE",
                            "CONSUMING",
                            "COMPLETED"
                        ]
                    },
                    {
                        "name": "dryRun",
                        "in": "query",
                        "description": "Whether to do dry-run",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/InstancePartitions"
                            }
                        }
                    }
                }
            }
        },
        "/instances/{instanceName}": {
            "get": {
                "tags": [
                    "Instance"
                ],
                "summary": "Get instance information",
                "description": "",
                "operationId": "getInstance",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Server_a.b.com_20000 | Broker_my.broker.com_30000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Instance not found"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Instance"
                ],
                "summary": "Update the specified instance",
                "description": "Update specified instance with given instance config",
                "operationId": "updateInstance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Server_a.b.com_20000 | Broker_my.broker.com_30000"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Instance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Instance"
                ],
                "summary": "Drop an instance",
                "description": "Drop an instance",
                "operationId": "dropInstance",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Server_a.b.com_20000 | Broker_my.broker.com_30000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Instance not found"
                    },
                    "409": {
                        "description": "Instance cannot be dropped"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/instances": {
            "get": {
                "tags": [
                    "Instance"
                ],
                "summary": "List all instances",
                "description": "",
                "operationId": "getAllInstances",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Instance"
                ],
                "summary": "Create a new instance",
                "description": "Creates a new instance with given instance config",
                "operationId": "addInstance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Instance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "409": {
                        "description": "Instance already exists"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/instances/{instanceName}/updateTags": {
            "put": {
                "tags": [
                    "Instance"
                ],
                "summary": "Update the tags of the specified instance",
                "description": "Update the tags of the specified instance",
                "operationId": "updateInstanceTags",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Server_a.b.com_20000 | Broker_my.broker.com_30000"
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Comma separated tags list",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/instances/{instanceName}/state": {
            "post": {
                "tags": [
                    "Instance"
                ],
                "summary": "Enable/disable/drop an instance",
                "description": "Enable/disable/drop an instance",
                "operationId": "toggleInstanceState",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "instanceName",
                        "in": "path",
                        "description": "Instance name",
                        "required": true,
                        "type": "string",
                        "x-example": "Server_a.b.com_20000 | Broker_my.broker.com_30000"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Instance not found"
                    },
                    "409": {
                        "description": "Instance cannot be dropped"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/leader/tables": {
            "get": {
                "tags": [
                    "Leader"
                ],
                "summary": "Gets leaders for all tables",
                "description": "Gets leaders for all tables",
                "operationId": "getLeadersForAllTables",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LeadControllerResponse"
                        }
                    }
                }
            }
        },
        "/leader/tables/{tableName}": {
            "get": {
                "tags": [
                    "Leader"
                ],
                "summary": "Gets leader for a given table",
                "description": "Gets leader for a given table",
                "operationId": "getLeaderForTable",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/LeadControllerResponse"
                        }
                    }
                }
            }
        },
        "/schemas/{schemaName}": {
            "get": {
                "tags": [
                    "Schema"
                ],
                "summary": "Get a schema",
                "description": "Gets a schema by name",
                "operationId": "getSchema",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "schemaName",
                        "in": "path",
                        "description": "Schema name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Schema not found"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Schema"
                ],
                "summary": "Update a schema",
                "description": "Updates a schema",
                "operationId": "updateSchema",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "schemaName",
                        "in": "path",
                        "description": "Name of the schema",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "reload",
                        "in": "query",
                        "description": "Whether to reload the table if the new schema is backward compatible",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FormDataMultiPart"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated schema"
                    },
                    "404": {
                        "description": "Schema not found"
                    },
                    "400": {
                        "description": "Missing or invalid request body"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Schema"
                ],
                "summary": "Delete a schema",
                "description": "Deletes a schema by name",
                "operationId": "deleteSchema",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "schemaName",
                        "in": "path",
                        "description": "Schema name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted schema"
                    },
                    "404": {
                        "description": "Schema not found"
                    },
                    "409": {
                        "description": "Schema is in use"
                    },
                    "500": {
                        "description": "Error deleting schema"
                    }
                }
            }
        },
        "/schemas": {
            "get": {
                "tags": [
                    "Schema"
                ],
                "summary": "List all schema names",
                "description": "Lists all schema names",
                "operationId": "listSchemaNames",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Schema"
                ],
                "summary": "Add a new schema",
                "description": "Adds a new schema",
                "operationId": "addSchema",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "override",
                        "in": "query",
                        "description": "Whether to override the schema if the schema exists",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Schema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created schema"
                    },
                    "404": {
                        "description": "Schema not found"
                    },
                    "400": {
                        "description": "Missing or invalid request body"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/schemas/validate": {
            "post": {
                "tags": [
                    "Schema"
                ],
                "summary": "Validate schema",
                "description": "This API returns the schema that matches the one you get from 'GET /schema/{schemaName}'. This allows us to validate schema before apply.",
                "operationId": "validateSchema",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FormDataMultiPart"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully validated schema"
                    },
                    "400": {
                        "description": "Missing or invalid request body"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/segments/{tableName}": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "List all segments",
                "description": "List all segments",
                "operationId": "getSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Segment"
                ],
                "summary": "Delete all segments",
                "description": "Delete all segments",
                "operationId": "deleteAllSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/delete": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Delete the segments in the JSON array payload",
                "description": "Delete the segments in the JSON array payload",
                "operationId": "deleteSegments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/{segmentName}": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Download a segment",
                "description": "Download a segment",
                "operationId": "downloadSegment",
                "produces": [
                    "application/octet-stream"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Segment"
                ],
                "summary": "Delete a segment",
                "description": "Delete a segment",
                "operationId": "deleteSegment",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/reload": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload all segments",
                "description": "Reload all segments",
                "operationId": "reloadAllSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/{segmentName}/reload": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload a segment",
                "description": "Reload a segment",
                "operationId": "reloadSegment",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableNameWithType}/{segmentName}/reset": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Resets a segment by first disabling it, waiting for external view to stabilize, and finally enabling it again",
                "description": "Resets a segment by disabling and then enabling the segment",
                "operationId": "resetSegment",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableNameWithType",
                        "in": "path",
                        "description": "Name of the table with type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maxWaitTimeMs",
                        "in": "query",
                        "description": "Maximum time in milliseconds to wait for reset to be completed. By default, uses serverAdminRequestTimeout",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableNameWithType}/reset": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Resets all segments of the table, by first disabling them, waiting for external view to stabilize, and finally enabling the segments",
                "description": "Resets a segment by disabling and then enabling a segment",
                "operationId": "resetAllSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableNameWithType",
                        "in": "path",
                        "description": "Name of the table with type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maxWaitTimeMs",
                        "in": "query",
                        "description": "Maximum time in milliseconds to wait for reset to be completed. By default, uses serverAdminRequestTimeout",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/servers": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get a map from server to segments hosted by the server",
                "description": "Get a map from server to segments hosted by the server",
                "operationId": "getServerToSegmentsMap",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/segments": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)",
                "description": "Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)",
                "operationId": "getServerToSegmentsMapDeprecated1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "MUST be null",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tables/{tableName}/segments/metadata": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)",
                "description": "Get a map from server to segments hosted by the server (deprecated, use 'GET /segments/{tableName}/servers' instead)",
                "operationId": "getServerToSegmentsMapDeprecated2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "MUST be null",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/segments/{tableName}/crc": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get a map from segment to CRC of the segment (only apply to OFFLINE table)",
                "description": "Get a map from segment to CRC of the segment (only apply to OFFLINE table)",
                "operationId": "getSegmentToCrcMap",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/segments/crc": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get a map from segment to CRC of the segment (deprecated, use 'GET /segments/{tableName}/crc' instead)",
                "description": "Get a map from segment to CRC of the segment (deprecated, use 'GET /segments/{tableName}/crc' instead)",
                "operationId": "getSegmentToCrcMapDeprecated",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tables/{tableName}/segments/{segmentName}/metadata": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)",
                "description": "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)",
                "operationId": "getSegmentMetadataDeprecated1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tables/{tableName}/segments/{segmentName}": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)",
                "description": "Get the metadata for a segment (deprecated, use 'GET /segments/{tableName}/{segmentName}/metadata' instead)",
                "operationId": "getSegmentMetadataDeprecated2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "MUST be null",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tables/{tableName}/segments/{segmentName}/reload": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)",
                "description": "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)",
                "operationId": "reloadSegmentDeprecated2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                },
                "deprecated": true
            },
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)",
                "description": "Reload a segment (deprecated, use 'POST /segments/{tableName}/{segmentName}/reload' instead)",
                "operationId": "reloadSegmentDeprecated1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tables/{tableName}/segments/reload": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)",
                "description": "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)",
                "operationId": "reloadAllSegmentsDeprecated2",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                },
                "deprecated": true
            },
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)",
                "description": "Reload all segments (deprecated, use 'POST /segments/{tableName}/reload' instead)",
                "operationId": "reloadAllSegmentsDeprecated1",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/segments/{tableName}/metadata": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get the server metadata for all table segments",
                "description": "Get the server metadata for all table segments",
                "operationId": "getServerMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables/{realtimeTableName}/consumingSegmentsInfo": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Returns state of consuming segments",
                "description": "Gets the status of consumers from all servers",
                "operationId": "getConsumingSegmentsInfo",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "realtimeTableName",
                        "in": "path",
                        "description": "Realtime table name with or without type",
                        "required": true,
                        "type": "string",
                        "x-example": "myTable | myTable_REALTIME"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/segments/{tableName}/{segmentName}/metadata": {
            "get": {
                "tags": [
                    "Segment"
                ],
                "summary": "Get the metadata for a segment",
                "description": "Get the metadata for a segment",
                "operationId": "getSegmentMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "segmentName",
                        "in": "path",
                        "description": "Name of the segment",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/segments/{tableName}/startReplaceSegments": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Start to replace segments",
                "description": "Start to replace segments",
                "operationId": "startReplaceSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/StartReplaceSegmentsRequest"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/segments/{tableName}/endReplaceSegments": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "End to replace segments",
                "description": "End to replace segments",
                "operationId": "endReplaceSegments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "segmentLineageEntryId",
                        "in": "query",
                        "description": "Segment lineage entry id returned by startReplaceSegments API",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/segments": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Upload a segment",
                "description": "Upload a segment as binary",
                "operationId": "uploadSegmentAsMultiPart",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FormDataMultiPart"
                        }
                    },
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "Name of the table",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "enableParallelPushProtection",
                        "in": "query",
                        "description": "Whether to enable parallel push protection",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/v2/segments": {
            "post": {
                "tags": [
                    "Segment"
                ],
                "summary": "Upload a segment",
                "description": "Upload a segment as binary",
                "operationId": "uploadSegmentAsMultiPartV2",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FormDataMultiPart"
                        }
                    },
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "Name of the table",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "enableParallelPushProtection",
                        "in": "query",
                        "description": "Whether to enable parallel push protection",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/tables/{tableName}/indexingConfigs": {
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Update table indexing configuration",
                "description": "",
                "operationId": "updateIndexingConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name (without type)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Server error updating configuration"
                    }
                },
                "deprecated": true
            }
        },
        "/tables/{tableName}/instances": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "List table instances",
                "description": "List instances of the given table",
                "operationId": "getTableInstances",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name without type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Instance type",
                        "required": false,
                        "type": "string",
                        "x-example": "broker",
                        "enum": [
                            "BROKER",
                            "SERVER"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tables/{tableName}/metadataConfigs": {
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Update table metadata",
                "description": "Updates table configuration",
                "operationId": "updateTableMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "404": {
                        "description": "Table not found"
                    }
                },
                "deprecated": true
            }
        },
        "/tables/{tableName}/rebalance": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Rebalances a table (reassign instances and segments for a table)",
                "description": "Rebalances a table (reassign instances and segments for a table)",
                "operationId": "rebalance",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table to rebalance",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "OFFLINE|REALTIME",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dryRun",
                        "in": "query",
                        "description": "Whether to rebalance table in dry-run mode",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "reassignInstances",
                        "in": "query",
                        "description": "Whether to reassign instances before reassigning segments",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "includeConsuming",
                        "in": "query",
                        "description": "Whether to reassign CONSUMING segments for real-time table",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "bootstrap",
                        "in": "query",
                        "description": "Whether to rebalance table in bootstrap mode (regardless of minimum segment movement, reassign all segments in a round-robin fashion as if adding new segments to an empty table)",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "downtime",
                        "in": "query",
                        "description": "Whether to allow downtime for the rebalance",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "minAvailableReplicas",
                        "in": "query",
                        "description": "For no-downtime rebalance, minimum number of replicas to keep alive during rebalance, or maximum number of replicas allowed to be unavailable if value is negative",
                        "required": false,
                        "type": "integer",
                        "default": 1,
                        "format": "int32"
                    },
                    {
                        "name": "bestEfforts",
                        "in": "query",
                        "description": "Whether to use best-efforts to rebalance (not fail the rebalance when the no-downtime contract cannot be achieved)",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RebalanceResult"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/state": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get current table state",
                "description": "Get current table state",
                "operationId": "getTableState",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table to get its state",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Lists all tables in cluster",
                "description": "Lists all tables in cluster",
                "operationId": "listTableConfigs",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Adds a table",
                "description": "Adds a table",
                "operationId": "addTable",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get/Enable/Disable/Drop a table",
                "description": "Get/Enable/Disable/Drop a table. If table name is the only parameter specified , the tableconfig will be printed",
                "operationId": "alterTableStateOrListTableConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "enable|disable|drop",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Updates table config for a table",
                "description": "Updates table config for a table",
                "operationId": "updateTableConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Table"
                ],
                "summary": "Deletes a table",
                "description": "Deletes a table",
                "operationId": "deleteTable",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table to delete",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/stats": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "table stats",
                "description": "Provides metadata info/stats about the table.",
                "operationId": "getTableStats",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables/recommender": {
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Recommend config",
                "description": "Recommend a config with input json",
                "operationId": "recommendConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables/validate": {
            "post": {
                "tags": [
                    "Table"
                ],
                "summary": "Validate table config for a table",
                "description": "This API returns the table config that matches the one you get from 'GET /tables/{tableName}'. This allows us to validate table config before apply.",
                "operationId": "checkTableConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/schema": {
            "get": {
                "tags": [
                    "Schema"
                ],
                "summary": "Get table schema",
                "description": "Read table schema",
                "operationId": "getTableSchema",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name (without type)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    }
                }
            }
        },
        "/tables/{tableName}/segmentConfigs": {
            "put": {
                "tags": [
                    "Table"
                ],
                "summary": "Update segments configuration",
                "description": "Updates segmentsConfig section (validation and retention) of a table",
                "operationId": "put",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "deprecated": true
            }
        },
        "/tables/{tableName}/rebuildBrokerResourceFromHelixTags": {
            "post": {
                "tags": [
                    "Table",
                    "Tenant"
                ],
                "summary": "Rebuild broker resource for table",
                "description": "when new brokers are added",
                "operationId": "rebuildBrokerResource",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name (with type)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad request: table name has to be with table type"
                    },
                    "500": {
                        "description": "Internal error rebuilding broker resource or serializing response"
                    }
                }
            }
        },
        "/tasks/schedule": {
            "post": {
                "tags": [
                    "Task"
                ],
                "summary": "Schedule tasks and return a map from task type to task name scheduled",
                "description": "",
                "operationId": "scheduleTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "query",
                        "description": "Task type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "Table name (with type suffix)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/taskqueuestate/{taskType}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the state (task queue state) for the given task type (deprecated)",
                "description": "",
                "operationId": "getTaskQueueStateDeprecated",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringResultResponse"
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tasks/tasks/{taskType}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "List all tasks for the given task type (deprecated)",
                "description": "",
                "operationId": "getTasksDeprecated",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tasks/taskstates/{taskType}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get a map from task to task state for the given task type (deprecated)",
                "description": "",
                "operationId": "getTaskStatesDeprecated",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "enum": [
                                    "NOT_STARTED",
                                    "IN_PROGRESS",
                                    "STOPPED",
                                    "STOPPING",
                                    "FAILED",
                                    "COMPLETED",
                                    "ABORTED",
                                    "TIMED_OUT",
                                    "TIMING_OUT",
                                    "FAILING"
                                ]
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tasks/taskstate/{taskName}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the task state for the given task (deprecated)",
                "description": "",
                "operationId": "getTaskStateDeprecated",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/StringResultResponse"
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tasks/taskconfig/{taskName}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the task config (a list of child task configs) for the given task (deprecated)",
                "description": "",
                "operationId": "getTaskConfigsDeprecated",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PinotTaskConfig"
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tasks/scheduler/information": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch cron scheduler information",
                "description": "",
                "operationId": "getCronSchedulerInformation",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/scheduler/jobKeys": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch cron scheduler job keys",
                "description": "",
                "operationId": "getCronSchedulerJobKeys",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JobKey"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/scheduler/jobDetails": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Fetch cron scheduler job keys",
                "description": "",
                "operationId": "getCronSchedulerJobDetails",
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "query",
                        "description": "Table name (with type suffix)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "taskType",
                        "in": "query",
                        "description": "Task type",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/scheduletasks": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Schedule tasks (deprecated)",
                "description": "",
                "operationId": "scheduleTasksDeprecated",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tasks/{taskType}/cleanup": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Clean up finished tasks (COMPLETED, FAILED) for the given task type",
                "description": "",
                "operationId": "cleanUpTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/cleanuptasks/{taskType}": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Clean up finished tasks (COMPLETED, FAILED) for the given task type (deprecated)",
                "description": "",
                "operationId": "cleanUpTasksDeprecated",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tasks/{taskType}/stop": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Stop all running/pending tasks (as well as the task queue) for the given task type",
                "description": "",
                "operationId": "stopTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/resume": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Resume all stopped tasks (as well as the task queue) for the given task type",
                "description": "",
                "operationId": "resumeTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/taskqueue/{taskType}": {
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Stop/resume a task queue (deprecated)",
                "description": "",
                "operationId": "toggleTaskQueueState",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "state",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "tags": [
                    "Task"
                ],
                "summary": "Delete a task queue (deprecated)",
                "description": "",
                "operationId": "deleteTaskQueue",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "forceDelete",
                        "in": "query",
                        "description": "Whether to force delete the task queue (expert only option, enable with cautious",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tasks/{taskType}": {
            "delete": {
                "tags": [
                    "Task"
                ],
                "summary": "Delete all tasks (as well as the task queue) for the given task type",
                "description": "",
                "operationId": "deleteTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "forceDelete",
                        "in": "query",
                        "description": "Whether to force deleting the tasks (expert only option, enable with cautious",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                }
            }
        },
        "/tasks/tasktypes": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "List all task types",
                "description": "",
                "operationId": "listTaskTypes",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/task/{taskName}/state": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the task state for the given task",
                "description": "",
                "operationId": "getTaskState",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NOT_STARTED",
                                "IN_PROGRESS",
                                "STOPPED",
                                "STOPPING",
                                "FAILED",
                                "COMPLETED",
                                "ABORTED",
                                "TIMED_OUT",
                                "TIMING_OUT",
                                "FAILING"
                            ]
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/tasks": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "List all tasks for the given task type",
                "description": "",
                "operationId": "getTasks",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{taskType}/taskstates": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get a map from task to task state for the given task type",
                "description": "",
                "operationId": "getTaskStates",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "enum": [
                                    "NOT_STARTED",
                                    "IN_PROGRESS",
                                    "STOPPED",
                                    "STOPPING",
                                    "FAILED",
                                    "COMPLETED",
                                    "ABORTED",
                                    "TIMED_OUT",
                                    "TIMING_OUT",
                                    "FAILING"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/tasks/task/{taskName}/config": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the task config (a list of child task configs) for the given task",
                "description": "",
                "operationId": "getTaskConfigs",
                "parameters": [
                    {
                        "name": "taskName",
                        "in": "path",
                        "description": "Task name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PinotTaskConfig"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/taskqueues": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "List all task queues (deprecated)",
                "description": "",
                "operationId": "getTaskQueues",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/tasks/{taskType}/state": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Get the state (task queue state) for the given task type",
                "description": "",
                "operationId": "getTaskQueueState",
                "parameters": [
                    {
                        "name": "taskType",
                        "in": "path",
                        "description": "Task type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NOT_STARTED",
                                "IN_PROGRESS",
                                "STOPPED",
                                "STOPPING",
                                "FAILED",
                                "COMPLETED",
                                "ABORTED",
                                "TIMED_OUT",
                                "TIMING_OUT",
                                "FAILING"
                            ]
                        }
                    }
                }
            }
        },
        "/tenants": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "List all tenants",
                "description": "",
                "operationId": "getAllTenants",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Tenant type",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "BROKER",
                            "SERVER"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Error reading tenants list"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tenant"
                ],
                "summary": " Create a tenant",
                "description": "",
                "operationId": "createTenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Tenant"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Error creating tenant"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Update a tenant",
                "description": "",
                "operationId": "updateTenant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Tenant"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Failed to update the tenant"
                    }
                }
            }
        },
        "/tenants/{tenantName}": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "List instance for a tenant, or enable/disable/drop a tenant",
                "description": "",
                "operationId": "listInstanceOrToggleTenantState",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Tenant name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Tenant type (server|broker)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "state",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Error reading tenants list"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Delete a tenant",
                "description": "",
                "operationId": "deleteTenant",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Tenant name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Tenant type",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "SERVER",
                            "BROKER"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Tenant can not be deleted"
                    },
                    "404": {
                        "description": "Tenant not found"
                    },
                    "500": {
                        "description": "Error deleting tenant"
                    }
                }
            }
        },
        "/tenants/{tenantName}/tables": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "List tables on a a server tenant",
                "description": "",
                "operationId": "getTablesOnTenant",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Tenant name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Error reading list"
                    }
                }
            }
        },
        "/tenants/{tenantName}/metadata": {
            "get": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Get tenant information",
                "description": "",
                "operationId": "getTenantMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Tenant name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "tenant type",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "SERVER",
                            "BROKER"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TenantMetadata"
                        }
                    },
                    "404": {
                        "description": "Tenant not found"
                    },
                    "500": {
                        "description": "Server error reading tenant information"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tenant"
                ],
                "summary": "Change tenant state",
                "description": "",
                "operationId": "changeTenantState",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Tenant name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "tenant type",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "SERVER",
                            "BROKER"
                        ]
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "state",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "enable",
                            "disable",
                            "drop"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Tenant not found"
                    },
                    "500": {
                        "description": "Server error reading tenant information"
                    }
                }
            }
        },
        "/version": {
            "get": {
                "tags": [
                    "Version"
                ],
                "summary": "Get version number of Pinot components",
                "description": "",
                "operationId": "getVersionNumber",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/tables/{tableName}/size": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Read table sizes",
                "description": "Get table size details. Table size is the size of untarred segments including replication",
                "operationId": "getTableSize",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Table name without type",
                        "required": true,
                        "type": "string",
                        "x-example": "myTable | myTable_OFFLINE"
                    },
                    {
                        "name": "detailed",
                        "in": "query",
                        "description": "Get detailed information",
                        "required": false,
                        "type": "boolean",
                        "default": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tables/{tableName}/idealstate": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get table ideal state",
                "description": "Get table ideal state",
                "operationId": "getIdealState",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableType",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TableView"
                        }
                    }
                }
            }
        },
        "/tables/{tableName}/externalview": {
            "get": {
                "tags": [
                    "Table"
                ],
                "summary": "Get table external view",
                "description": "Get table external view",
                "operationId": "getExternalView",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "Name of the table",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableType",
                        "in": "query",
                        "description": "realtime|offline",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TableView"
                        }
                    }
                }
            }
        },
        "/zk/ls": {
            "get": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "List the child znodes",
                "description": "",
                "operationId": "ls",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string",
                        "default": "/"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/delete": {
            "delete": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "Delete the znode at this path",
                "description": "",
                "operationId": "delete",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string",
                        "default": "/"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/stat": {
            "get": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "Get the stat",
                "description": " Use this api to fetch additional details of a znode such as creation time, modified time, numChildren etc ",
                "operationId": "stat",
                "produces": [
                    "text/plain"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string",
                        "default": "/"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Table not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/get": {
            "get": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "Get content of the znode",
                "description": "",
                "operationId": "getData",
                "produces": [
                    "text/plain"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string",
                        "default": "/"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/lsl": {
            "get": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "List the child znodes along with Stats",
                "description": "",
                "operationId": "lsl",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string",
                        "default": "/"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/zk/put": {
            "put": {
                "tags": [
                    "Zookeeper"
                ],
                "summary": "Update the content of the node",
                "description": "",
                "operationId": "putData",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "query",
                        "description": "Zookeeper Path, must start with /",
                        "required": true,
                        "type": "string",
                        "default": "/"
                    },
                    {
                        "name": "data",
                        "in": "query",
                        "description": "Content",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "expectedVersion",
                        "in": "query",
                        "description": "expectedVersion",
                        "required": true,
                        "type": "string",
                        "default": "-1"
                    },
                    {
                        "name": "accessOption",
                        "in": "query",
                        "description": "accessOption",
                        "required": true,
                        "type": "string",
                        "default": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "ZK Path not found"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "InstanceInfo": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "format": "int32"
                },
                "instanceName": {
                    "type": "string"
                }
            }
        },
        "SuccessResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "BodyPart": {
            "type": "object",
            "properties": {
                "contentDisposition": {
                    "$ref": "#/definitions/ContentDisposition"
                },
                "entity": {
                    "type": "object"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "mediaType": {
                    "$ref": "#/definitions/MediaType"
                },
                "messageBodyWorkers": {
                    "$ref": "#/definitions/MessageBodyWorkers"
                },
                "parent": {
                    "$ref": "#/definitions/MultiPart"
                },
                "providers": {
                    "$ref": "#/definitions/Providers"
                },
                "parameterizedHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ParameterizedHeader"
                        }
                    }
                }
            }
        },
        "ContentDisposition": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fileName": {
                    "type": "string"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "modificationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "readDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "size": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "FormDataBodyPart": {
            "type": "object",
            "properties": {
                "contentDisposition": {
                    "$ref": "#/definitions/ContentDisposition"
                },
                "entity": {
                    "type": "object"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "mediaType": {
                    "$ref": "#/definitions/MediaType"
                },
                "messageBodyWorkers": {
                    "$ref": "#/definitions/MessageBodyWorkers"
                },
                "parent": {
                    "$ref": "#/definitions/MultiPart"
                },
                "providers": {
                    "$ref": "#/definitions/Providers"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "simple": {
                    "type": "boolean"
                },
                "formDataContentDisposition": {
                    "$ref": "#/definitions/FormDataContentDisposition"
                },
                "parameterizedHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ParameterizedHeader"
                        }
                    }
                }
            }
        },
        "FormDataContentDisposition": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "fileName": {
                    "type": "string"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "modificationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "readDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "size": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "FormDataMultiPart": {
            "type": "object",
            "properties": {
                "contentDisposition": {
                    "$ref": "#/definitions/ContentDisposition"
                },
                "entity": {
                    "type": "object"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "mediaType": {
                    "$ref": "#/definitions/MediaType"
                },
                "messageBodyWorkers": {
                    "$ref": "#/definitions/MessageBodyWorkers"
                },
                "parent": {
                    "$ref": "#/definitions/MultiPart"
                },
                "providers": {
                    "$ref": "#/definitions/Providers"
                },
                "bodyParts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BodyPart"
                    }
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/FormDataBodyPart"
                        }
                    }
                },
                "parameterizedHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ParameterizedHeader"
                        }
                    }
                }
            }
        },
        "MediaType": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "subtype": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "wildcardType": {
                    "type": "boolean"
                },
                "wildcardSubtype": {
                    "type": "boolean"
                }
            }
        },
        "MessageBodyWorkers": {
            "type": "object"
        },
        "MultiPart": {
            "type": "object",
            "properties": {
                "contentDisposition": {
                    "$ref": "#/definitions/ContentDisposition"
                },
                "entity": {
                    "type": "object"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "mediaType": {
                    "$ref": "#/definitions/MediaType"
                },
                "messageBodyWorkers": {
                    "$ref": "#/definitions/MessageBodyWorkers"
                },
                "parent": {
                    "$ref": "#/definitions/MultiPart"
                },
                "providers": {
                    "$ref": "#/definitions/Providers"
                },
                "bodyParts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BodyPart"
                    }
                },
                "parameterizedHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ParameterizedHeader"
                        }
                    }
                }
            }
        },
        "ParameterizedHeader": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "Providers": {
            "type": "object"
        },
        "InstancePartitions": {
            "type": "object",
            "properties": {
                "instancePartitionsName": {
                    "type": "string",
                    "readOnly": true
                },
                "partitionToInstancesMap": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "Instances": {
            "type": "object",
            "properties": {
                "instances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Instance": {
            "type": "object",
            "required": [
                "host",
                "port",
                "type"
            ],
            "properties": {
                "host": {
                    "type": "string",
                    "readOnly": true
                },
                "port": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "type": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "CONTROLLER",
                        "BROKER",
                        "SERVER",
                        "MINION"
                    ]
                },
                "tags": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "pools": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "grpcPort": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                }
            }
        },
        "LeadControllerEntry": {
            "type": "object",
            "properties": {
                "tableNames": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "leadControllerId": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "LeadControllerResponse": {
            "type": "object",
            "properties": {
                "leadControllerResourceEnabled": {
                    "type": "boolean"
                },
                "leadControllerEntryMap": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/LeadControllerEntry"
                    }
                }
            }
        },
        "DateTimeFieldSpec": {
            "type": "object",
            "properties": {
                "format": {
                    "type": "string"
                },
                "granularity": {
                    "type": "string"
                },
                "singleValueField": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "maxLength": {
                    "type": "integer",
                    "format": "int32"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "INT",
                        "LONG",
                        "FLOAT",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING",
                        "BYTES",
                        "STRUCT",
                        "MAP",
                        "LIST"
                    ]
                },
                "transformFunction": {
                    "type": "string"
                },
                "defaultNullValue": {
                    "type": "object"
                },
                "virtualColumnProvider": {
                    "type": "string"
                },
                "defaultNullValueString": {
                    "type": "string"
                }
            }
        },
        "DimensionFieldSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "maxLength": {
                    "type": "integer",
                    "format": "int32"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "INT",
                        "LONG",
                        "FLOAT",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING",
                        "BYTES",
                        "STRUCT",
                        "MAP",
                        "LIST"
                    ]
                },
                "transformFunction": {
                    "type": "string"
                },
                "defaultNullValue": {
                    "type": "object"
                },
                "singleValueField": {
                    "type": "boolean"
                },
                "virtualColumnProvider": {
                    "type": "string"
                },
                "defaultNullValueString": {
                    "type": "string"
                }
            }
        },
        "MetricFieldSpec": {
            "type": "object",
            "properties": {
                "singleValueField": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "maxLength": {
                    "type": "integer",
                    "format": "int32"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "INT",
                        "LONG",
                        "FLOAT",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING",
                        "BYTES",
                        "STRUCT",
                        "MAP",
                        "LIST"
                    ]
                },
                "transformFunction": {
                    "type": "string"
                },
                "defaultNullValue": {
                    "type": "object"
                },
                "virtualColumnProvider": {
                    "type": "string"
                },
                "defaultNullValueString": {
                    "type": "string"
                }
            }
        },
        "Schema": {
            "type": "object",
            "properties": {
                "schemaName": {
                    "type": "string"
                },
                "primaryKeyColumns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dimensionFieldSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DimensionFieldSpec"
                    }
                },
                "metricFieldSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MetricFieldSpec"
                    }
                },
                "dateTimeFieldSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DateTimeFieldSpec"
                    }
                },
                "timeFieldSpec": {
                    "$ref": "#/definitions/TimeFieldSpec"
                }
            }
        },
        "TimeFieldSpec": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "incomingGranularitySpec": {
                    "$ref": "#/definitions/TimeGranularitySpec"
                },
                "outgoingGranularitySpec": {
                    "$ref": "#/definitions/TimeGranularitySpec"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "INT",
                        "LONG",
                        "FLOAT",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING",
                        "BYTES",
                        "STRUCT",
                        "MAP",
                        "LIST"
                    ]
                },
                "singleValueField": {
                    "type": "boolean"
                },
                "maxLength": {
                    "type": "integer",
                    "format": "int32"
                },
                "transformFunction": {
                    "type": "string"
                },
                "defaultNullValue": {
                    "type": "object"
                },
                "virtualColumnProvider": {
                    "type": "string"
                },
                "defaultNullValueString": {
                    "type": "string"
                }
            }
        },
        "TimeGranularitySpec": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "dataType": {
                    "type": "string",
                    "enum": [
                        "INT",
                        "LONG",
                        "FLOAT",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING",
                        "BYTES",
                        "STRUCT",
                        "MAP",
                        "LIST"
                    ]
                },
                "timeType": {
                    "type": "string",
                    "enum": [
                        "NANOSECONDS",
                        "MICROSECONDS",
                        "MILLISECONDS",
                        "SECONDS",
                        "MINUTES",
                        "HOURS",
                        "DAYS"
                    ]
                },
                "timeUnitSize": {
                    "type": "integer",
                    "format": "int32"
                },
                "timeFormat": {
                    "type": "string"
                }
            }
        },
        "ConsumingSegmentInfo": {
            "type": "object",
            "properties": {
                "_serverName": {
                    "type": "string"
                },
                "_consumerState": {
                    "type": "string"
                },
                "_lastConsumedTimestamp": {
                    "type": "integer",
                    "format": "int64"
                },
                "_partitionToOffsetMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "ConsumingSegmentsInfoMap": {
            "type": "object",
            "properties": {
                "_segmentToConsumingInfoMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ConsumingSegmentInfo"
                        }
                    }
                }
            }
        },
        "StartReplaceSegmentsRequest": {
            "type": "object",
            "properties": {
                "segmentsFrom": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                },
                "segmentsTo": {
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "RebalanceResult": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "NO_OP",
                        "DONE",
                        "FAILED",
                        "IN_PROGRESS"
                    ]
                },
                "description": {
                    "type": "string",
                    "readOnly": true
                },
                "instanceAssignment": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "$ref": "#/definitions/InstancePartitions"
                    }
                },
                "segmentAssignment": {
                    "type": "object",
                    "readOnly": true,
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "StringResultResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                }
            }
        },
        "PinotTaskConfig": {
            "type": "object",
            "properties": {
                "configs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            }
        },
        "JobKey": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                }
            }
        },
        "Tenant": {
            "type": "object",
            "required": [
                "tenantName",
                "tenantRole"
            ],
            "properties": {
                "tenantRole": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "SERVER",
                        "BROKER"
                    ]
                },
                "tenantName": {
                    "type": "string",
                    "readOnly": true
                },
                "numberOfInstances": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "offlineInstances": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                },
                "realtimeInstances": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                }
            }
        },
        "TenantsList": {
            "type": "object",
            "properties": {
                "SERVER_TENANTS": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "BROKER_TENANTS": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "TenantMetadata": {
            "type": "object",
            "properties": {
                "ServerInstances": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "BrokerInstances": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "tenantName": {
                    "type": "string"
                }
            }
        },
        "SegmentSizeDetails": {
            "type": "object",
            "properties": {
                "reportedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "estimatedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "serverInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/SegmentSizeInfo"
                    }
                }
            }
        },
        "SegmentSizeInfo": {
            "type": "object",
            "properties": {
                "segmentName": {
                    "type": "string"
                },
                "diskSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "TableSizeDetails": {
            "type": "object",
            "properties": {
                "tableName": {
                    "type": "string"
                },
                "reportedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "estimatedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "offlineSegments": {
                    "$ref": "#/definitions/TableSubTypeSizeDetails"
                },
                "realtimeSegments": {
                    "$ref": "#/definitions/TableSubTypeSizeDetails"
                }
            }
        },
        "TableSubTypeSizeDetails": {
            "type": "object",
            "properties": {
                "reportedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "estimatedSizeInBytes": {
                    "type": "integer",
                    "format": "int64"
                },
                "missingSegments": {
                    "type": "integer",
                    "format": "int32"
                },
                "segments": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/SegmentSizeDetails"
                    }
                }
            }
        },
        "TableView": {
            "type": "object",
            "properties": {
                "OFFLINE": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "REALTIME": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}