// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantMetadata tenant metadata
//
// swagger:model TenantMetadata
type TenantMetadata struct {

	// broker instances
	// Unique: true
	BrokerInstances []string `json:"BrokerInstances"`

	// server instances
	// Unique: true
	ServerInstances []string `json:"ServerInstances"`

	// tenant name
	TenantName string `json:"tenantName,omitempty"`
}

// Validate validates this tenant metadata
func (m *TenantMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrokerInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerInstances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantMetadata) validateBrokerInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.BrokerInstances) { // not required
		return nil
	}

	if err := validate.UniqueItems("BrokerInstances", "body", m.BrokerInstances); err != nil {
		return err
	}

	return nil
}

func (m *TenantMetadata) validateServerInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerInstances) { // not required
		return nil
	}

	if err := validate.UniqueItems("ServerInstances", "body", m.ServerInstances); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenantMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantMetadata) UnmarshalBinary(b []byte) error {
	var res TenantMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
